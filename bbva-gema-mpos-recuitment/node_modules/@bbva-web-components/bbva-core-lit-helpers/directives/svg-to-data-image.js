import { directive } from 'lit-html';

/**
 * A directive that use the return type of `SVG` template
 * for create a data URI with the same.
 *
 * Example:
 *
 * ```
 * export const mySVGTag = svg`
 * <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 9 12">
 *  <path fill-rule="evenodd" d="M.709 8.504a.753.753 0 01-.407-.118.744.744 0 01-.227-1.035s.373-.613.372-1.478C.444 5.171.049 4.476.047 4.47a.745.745 0 01.27-1.023.752.752 0 011.026.271c.064.106.6 1.06.606 2.151.004 1.3-.543 2.193-.609 2.29a.75.75 0 01-.631.346m2.045.94a.749.749 0 01-.632-1.152c.005-.005.616-.998.61-2.405-.003-1.149-.642-2.269-.648-2.28a.751.751 0 011.3-.75c.036.057.845 1.466.85 3.024.007 1.866-.81 3.164-.846 3.218a.752.752 0 01-.634.346m2.07 1.101a.742.742 0 01-.404-.12.745.745 0 01-.227-1.033c.007-.013.943-1.522.937-3.667-.008-1.763-.973-3.453-.983-3.47a.746.746 0 01.273-1.021.745.745 0 011.023.27c.05.083 1.18 2.048 1.189 4.216.009 2.603-1.127 4.404-1.174 4.477a.748.748 0 01-.635.348m2.065 1.052a.746.746 0 01-.402-.118.743.743 0 01-.23-1.033c.01-.02 1.219-1.96 1.21-4.723-.007-2.27-1.25-4.443-1.264-4.465a.752.752 0 011.3-.75c.06.1 1.456 2.53 1.467 5.207.01 3.224-1.387 5.443-1.448 5.537a.747.747 0 01-.633.345"/>
 * </svg>`;
 *
 * From:
 *  <div style="background: url(${svgToDataImage(mySVGTag}) no-repeat center center></div>
 *
 * To:
 * <div style="background: url('data:image/svg+xml;utf8,%0A%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20xmlns:xlink=%22http://www.w3.org/1999/xlink%22%20viewBox=%220%200%209%2012%22%3E%0A%20%20%3Cpath%20fill-rule=%22evenodd%22%20d=%22M.709%208.504a.753.753%200%2001-.407-.118.744.744%200%2001-.227-1.035s.373-.613.372-1.478C.444%205.171.049%204.476.047%204.47a.745.745%200%2001.27-1.023.752.752%200%20011.026.271c.064.106.6%201.06.606%202.151.004%201.3-.543%202.193-.609%202.29a.75.75%200%2001-.631.346m2.045.94a.749.749%200%2001-.632-1.152c.005-.005.616-.998.61-2.405-.003-1.149-.642-2.269-.648-2.28a.751.751%200%20011.3-.75c.036.057.845%201.466.85%203.024.007%201.866-.81%203.164-.846%203.218a.752.752%200%2001-.634.346m2.07%201.101a.742.742%200%2001-.404-.12.745.745%200%2001-.227-1.033c.007-.013.943-1.522.937-3.667-.008-1.763-.973-3.453-.983-3.47a.746.746%200%2001.273-1.021.745.745%200%20011.023.27c.05.083%201.18%202.048%201.189%204.216.009%202.603-1.127%204.404-1.174%204.477a.748.748%200%2001-.635.348m2.065%201.052a.746.746%200%2001-.402-.118.743.743%200%2001-.23-1.033c.01-.02%201.219-1.96%201.21-4.723-.007-2.27-1.25-4.443-1.264-4.465a.752.752%200%20011.3-.75c.06.1%201.456%202.53%201.467%205.207.01%203.224-1.387%205.443-1.448%205.537a.747.747%200%2001-.633.345%22/%3E%0A%3C/svg%3E%0A') no-repeat center center></div>
 * ```
 */

const svgXmlEncode = (url = '') => {
  const svgEncode = encodeURI(url).replace(/#/g, '%23');
  const svgXml = `'data:image/svg+xml;utf8,${svgEncode}'`;
  return svgXml;
};

// eslint-disable-next-line consistent-return
export const svgToDataImage = directive(newSvgNode => part => {
  const svgTemplate = newSvgNode.values[0];
  const isSvgType = svgTemplate.type === 'svg';
  const svgTemplateStrings = svgTemplate.strings;
  const svgTemplateStringsLength = svgTemplateStrings.length;
  const svgTemplateValues = svgTemplate.values;
  let svgXmlEncodeString = [];

  if (!isSvgType || svgTemplateStringsLength === 0) {
    throw new Error('svgToDataImage can only be used with SVGTemplateResult');
  }

  if (svgTemplateStringsLength === 1) {
    svgXmlEncodeString.push(svgXmlEncode(svgTemplateStrings[0]));
  }

  if (svgTemplateStringsLength > 1) {
    svgTemplateStrings.forEach((string, index) => {
      if (index === 0) {
        svgXmlEncodeString.push(string);
      } else {
        svgXmlEncodeString.push(`${svgTemplateValues[index - 1]}${string}`);
      }
    });

    svgXmlEncodeString = [svgXmlEncode(svgXmlEncodeString.join(''))];
  }

  if (part === undefined) {
    return svgXmlEncodeString[0];
  }

  part.setValue(svgXmlEncodeString[0]);
});
