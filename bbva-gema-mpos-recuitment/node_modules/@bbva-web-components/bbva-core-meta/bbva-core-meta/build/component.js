(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.DemoHelpers = {}));
}(this, (function (exports) { 'use strict';

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */

  /* eslint-disable no-unused-vars */

  /**
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]
   * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.
   *
   * @param {string} prop Property name
   * @param {?Object} obj Reference object
   * @return {string} Potentially renamed property name
   */
  window.JSCompiler_renameProperty = function (prop, obj) {
    return prop;
  };

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  const ABS_URL = /(^\/)|(^#)|(^[\w-\d]*:)/;
  let workingURL;
  let resolveDoc;
  /**
   * Resolves the given URL against the provided `baseUri'.
   *
   * Note that this function performs no resolution for URLs that start
   * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
   * URL resolution, use `window.URL`.
   *
   * @param {string} url Input URL to resolve
   * @param {?string=} baseURI Base URI to resolve the URL against
   * @return {string} resolved URL
   */

  function resolveUrl(url, baseURIparam) {
    let baseURI = baseURIparam;

    if (url && ABS_URL.test(url)) {
      return url;
    } // Lazy feature detection.


    if (workingURL === undefined) {
      workingURL = false;

      try {
        const u = new URL('b', 'http://a');
        u.pathname = 'c%20d';
        workingURL = u.href === 'http://a/c%20d';
      } catch (e) {// silently fail
      }
    }

    if (!baseURI) {
      baseURI = document.baseURI || window.location.href;
    }

    if (workingURL) {
      return new URL(url, baseURI).href;
    } // Fallback to creating an anchor into a disconnected document.


    if (!resolveDoc) {
      resolveDoc = document.implementation.createHTMLDocument('temp');
      resolveDoc.base = resolveDoc.createElement('base');
      resolveDoc.head.appendChild(resolveDoc.base);
      resolveDoc.anchor = resolveDoc.createElement('a');
      resolveDoc.body.appendChild(resolveDoc.anchor);
    }

    resolveDoc.base.href = baseURI;
    resolveDoc.anchor.href = url;
    return resolveDoc.anchor.href || url;
  }
  /**
   * Returns a path from a given `url`. The path includes the trailing
   * `/` from the url.
   *
   * @param {string} url Input URL to transform
   * @return {string} resolved path
   */

  function pathFromUrl(url) {
    return url.substring(0, url.lastIndexOf('/') + 1);
  }

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);
  /* eslint-disable import/no-mutable-exports */

  /**
   * Globally settable property that is automatically assigned to
   * `ElementMixin` instances, useful for binding in templates to
   * make URL's relative to an application's root.  Defaults to the main
   * document URL, but can be overridden by users.  It may be useful to set
   * `rootPath` to provide a stable application mount path when
   * using client side routing.
   */

  let rootPath =  pathFromUrl(document.baseURI || window.location.href);
  /**
   * A global callback used to sanitize any value before inserting it into the DOM.
   * The callback signature is:
   *
   *  function sanitizeDOMValue(value, name, type, node) { ... }
   *
   * Where:
   *
   * `value` is the value to sanitize.
   * `name` is the name of an attribute or property (for example, href).
   * `type` indicates where the value is being inserted: one of property, attribute, or text.
   * `node` is the node where the value is being inserted.
   *
   * @type {(function(*,string,string,Node):*)|undefined}
   */

  let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  const modules = {};
  const lcModules = {};
  /**
   * Sets a bbva-core-dom-module into the global registry by id.
   *
   * @param {string} id bbva-core-dom-module id
   * @param {DomModule} module bbva-core-dom-module instance
   * @return {void}
   */

  function setModule(id, module) {
    // store id separate from lowercased id so that
    // in all cases mixedCase id will stored distinctly
    // and lowercase version is a fallback
    modules[id] = module;
    lcModules[id.toLowerCase()] = module;
  }
  /**
   * Retrieves a bbva-core-dom-module from the global registry by id.
   *
   * @param {string} id bbva-core-dom-module id
   * @return {DomModule!} bbva-core-dom-module instance
   */


  function findModule(id) {
    return modules[id] || lcModules[id.toLowerCase()];
  }
  /**
   * The `bbva-core-dom-module` element registers the dom it contains to the name given
   * by the module's id attribute. It provides a unified database of dom
   * accessible via its static `import` API.
   *
   * Example:
   *
   *     <bbva-core-dom-module id="foo">
   *       <img src="stuff.png">
   *     </bbva-core-dom-module>
   *
   * Then in code in some other location that cannot access the bbva-core-dom-module above
   *
   *     let img = customElements.get('bbva-core-dom-module').import('foo', 'img');
   *
   * @customElement bbva-core-dom-module
   * @polymer
   * @LitElement
   */


  class BbvaCoreDomModule extends HTMLElement {
    static get observedAttributes() {
      return ['id'];
    }
    /**
     * Retrieves the element specified by the css `selector` in the module
     * registered by `id`. For example, this.import('foo', 'img');
     * @param {string} id The id of the bbva-core-dom-module in which to search.
     * @param {string=} selector The css selector by which to find the element.
     * @return {Element} Returns the element which matches `selector` in the
     * module registered at the specified `id`.
     *
     * @export
     * @nocollapse Referred to indirectly in style-gather.js
     */


    static import(id, selector) {
      if (id) {
        const m = findModule(id);

        if (m && selector) {
          return m.querySelector(selector);
        }

        return m;
      }

      return null;
    }
    /**
     * @param {string} name Name of attribute.
     * @param {?string} old Old value of attribute.
     * @param {?string} value Current value of attribute.
     * @param {?string} namespace Attribute namespace.
     * @return {void}
     * @override
     */


    attributeChangedCallback(name, old, value) {
      if (old !== value) {
        this.register();
      }
    }
    /**
     * The absolute URL of the original location of this `bbva-core-dom-module`.
     *
     * This value will differ from this element's `ownerDocument` in the
     * following ways:
     * - Takes into account any `assetpath` attribute added during bundling
     *   to indicate the original location relative to the bundled location
     */


    get assetpath() {
      // Don't override existing assetpath.
      if (!this.__assetpath) {
        const owner = this.ownerDocument;
        const url = resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI);
        this.__assetpath = pathFromUrl(url);
      }

      return this.__assetpath;
    }
    /**
     * Registers the bbva-core-dom-module at a given id. This method should only be called
     * when a bbva-core-dom-module is imperatively created. For
     * example, `document.createElement('bbva-core-dom-module').register('foo')`.
     * @param {string=} id The id at which to register the bbva-core-dom-module.
     * @return {void}
     */


    register(moduleId) {
      const id = moduleId || this.id;

      if (id) {

        this.id = id;
        setModule(id, this);
      }
    }

  }
  BbvaCoreDomModule.prototype.modules = modules;
  BbvaCoreDomModule.prototype.modulesStyles = {};

  if (!customElements.get('bbva-core-dom-module')) {
    customElements.define('bbva-core-dom-module', BbvaCoreDomModule);
  }

  /* eslint-disable no-console */

  /**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
  let CustomStyleInterface;

  if (window.ShadyCSS && window.ShadyCSS.CustomStyleInterface) {
    CustomStyleInterface = window.ShadyCSS.CustomStyleInterface;
  } else {
    CustomStyleInterface = undefined;
    console.warn('CustomStyleInterface shim not detected. Be sure to add ShadyCSS CustomStyleInterface to your app when running on browsers without native Shadow DOM!');
  }
  /**
   * Custom element for defining styles in the main document that can take
   * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims
   * for style encapsulation and custom properties.
   *
   * - Document styles defined in a `<bbva-core-custom-style>` are shimmed to ensure they
   *   do not leak into local DOM when running on browsers without native
   *   Shadow DOM.
   * - Custom properties can be defined in a `<bbva-core-custom-style>`. Use the `html` selector
   *   to define custom properties that apply to all custom elements.
   *
   * To use:
   *
   * - Place a `<bbva-core-custom-style>` element in the main document, wrapping an inline `<style>` tag that
   *   contains the CSS rules you want to shim.
   *
   * <bbva-core-custom-style>
   *   <style>
   *     html {
   *       --custom-color: blue;
   *       --custom-mixin: {
   *         font-weight: bold;
   *         color: red;
   *       };
   *     }
   *   </style>
   * </bbva-core-custom-style>
   * ```
   *
   * @customElement bbva-core-custom-style
   * @polymer
   * @LitElement
   */


  class BbvaCoreCustomStyle extends HTMLElement {
    constructor() {
      super();

      if (CustomStyleInterface) {
        this._style = null;
        CustomStyleInterface.addCustomStyle(this);
      }
    }
    /**
     * Returns the light-DOM `<style>` child this element wraps.
     *
     * @export
     * @return {HTMLStyleElement} This element's light-DOM `<style>`
     */


    getStyle() {
      if (this._style) {
        return this._style;
      }

      const style =
      /** @type {HTMLStyleElement} */
      this.querySelector('style');

      if (!style) {
        return null;
      }

      this._style = style;
      /*
      HTML Imports styling the main document are deprecated in Chrome
      https://crbug.com/523952
       If this element is not in the main document, then it must be in an HTML Import document.
      In that case, move the custom style to the main document.
       The ordering of `<bbva-core-custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd
      cases of ordering w.r.t the main document styles.
      */

      if (this.ownerDocument !== window.document) {
        window.document.head.appendChild(this);
      }

      return this._style;
    }

  }

  if (!customElements.get('bbva-core-custom-style')) {
    customElements.define('bbva-core-custom-style', BbvaCoreCustomStyle);
  }

  /* eslint-disable babel/no-unused-expressions */

  if (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {
    console.warn('ScopingShim not detected. Be sure to add ShadyCSS ScopingShim to your app!');
  }
  const setDocumentCustomStyles = styles => {
    const customStyles = document.createElement('template');
    customStyles.setAttribute('style', 'display: none;');
    customStyles.innerHTML = `
  <bbva-core-custom-style>
    <style>
      ${styles.cssText}
    </style>
  </bbva-core-custom-style>
  `;
    document.head.appendChild(customStyles.content);
  };

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */

  /**
   * An expression marker with embedded unique key to avoid collision with
   * possible text in templates.
   */
  const marker = `{{lit-${String(Math.random()).slice(2)}}}`;

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // from the options object, then options are supported. If not, then the third
  // argument to add/removeEventListener is interpreted as the boolean capture
  // value so we should only pass the `capture` property.

  let eventOptionsSupported = false; // Wrap into an IIFE because MS Edge <= v41 does not support having try/catch
  // blocks right into the body of a module

  (() => {
    try {
      const options = {
        get capture() {
          eventOptionsSupported = true;
          return false;
        }

      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any

      window.addEventListener('test', options, options); // eslint-disable-next-line @typescript-eslint/no-explicit-any

      window.removeEventListener('test', options, options);
    } catch (_e) {// event options not supported
    }
  })();

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // This line will be used in regexes to search for lit-html usage.
  // TODO(justinfagnani): inject version number at build time

  if (typeof window !== 'undefined') {
    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');
  }

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */

  if (typeof window.ShadyCSS === 'undefined') ; else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
    console.warn(`Incompatible ShadyCSS version detected. ` + `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` + `@webcomponents/shadycss@1.3.1.`);
  }

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  /**
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
   * replaced at compile time by the munged name for object[property]. We cannot
   * alias this function, so we have to use a small shim that has the same
   * behavior when not compiling.
   */


  window.JSCompiler_renameProperty = (prop, _obj) => prop;

  /**
  @license
  Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at
  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
  part of the polymer project is also subject to an additional IP rights grant
  found at http://polymer.github.io/PATENTS.txt
  */
  const supportsAdoptingStyleSheets = 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;
  const constructionToken = Symbol();
  class CSSResult {
    constructor(cssText, safeToken) {
      if (safeToken !== constructionToken) {
        throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
      }

      this.cssText = cssText;
    } // Note, this is a getter so that it's lazy. In practice, this means
    // stylesheets are not created until the first element instance is made.


    get styleSheet() {
      if (this._styleSheet === undefined) {
        // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
        // is constructable.
        if (supportsAdoptingStyleSheets) {
          this._styleSheet = new CSSStyleSheet();

          this._styleSheet.replaceSync(this.cssText);
        } else {
          this._styleSheet = null;
        }
      }

      return this._styleSheet;
    }

    toString() {
      return this.cssText;
    }

  }
  /**
   * Wrap a value for interpolation in a css tagged template literal.
   *
   * This is unsafe because untrusted CSS text can be used to phone home
   * or exfiltrate data to an attacker controlled site. Take care to only use
   * this with trusted input.
   */

  const unsafeCSS = value => {
    return new CSSResult(String(value), constructionToken);
  };

  const textFromCSSResult = value => {
    if (value instanceof CSSResult) {
      return value.cssText;
    } else if (typeof value === 'number') {
      return value;
    } else {
      throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
    }
  };
  /**
   * Template tag which which can be used with LitElement's `style` property to
   * set element styles. For security reasons, only literal string values may be
   * used. To incorporate non-literal values `unsafeCSS` may be used inside a
   * template string part.
   */


  const css = (strings, ...values) => {
    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, constructionToken);
  };

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // This line will be used in regexes to search for LitElement usage.
  // TODO(justinfagnani): inject version number at build time

  (window['litElementVersions'] || (window['litElementVersions'] = [])).push('2.3.1');

  const bbvaCoreDomModule = customElements.get('bbva-core-dom-module');

  setDocumentCustomStyles(css`
  /* Light */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Light.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Light.woff)
        format('woff');
    font-style: normal;
    font-weight: 300;
    font-display: fallback;
  }

  /* Book */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Book.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Book.woff)
        format('woff');
    font-style: normal;
    font-weight: 400;
    font-display: fallback;
  }

  /* Book Italic */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-BookItalic.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-BookItalic.woff)
        format('woff');
    font-style: italic;
    font-weight: 400;
    font-display: fallback;
  }

  /* Medium */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Medium.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Medium.woff)
        format('woff');
    font-style: normal;
    font-weight: 500;
    font-display: fallback;
  }

  /* Medium Italic */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-MediumItalic.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-MediumItalic.woff)
        format('woff');
    font-style: italic;
    font-weight: 500;
    font-display: fallback;
  }

  /* Regular */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Regular.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Regular.woff)
        format('woff');
    font-style: normal;
    font-weight: 600;
    font-display: fallback;
  }

  /* Bold */
  @font-face {
    font-family: 'Benton Sans';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Bold.woff2)
        format('woff2'),
      url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/benton/BentonSansBBVA-Bold.woff)
        format('woff');
    font-style: normal;
    font-weight: 700;
    font-display: fallback;
  }

  /* Tiempos */
  @font-face {
    font-family: 'Tiempos';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/tiempos/TiemposText-Regular.woff2)
      format('woff2');
    font-style: normal;
    font-weight: normal;
    font-display: fallback;
  }

  @font-face {
    font-family: 'Tiempos';
    src: url(https://bbva-experience-foundations.s3-eu-west-1.amazonaws.com/fonts/tiempos/TiemposText-RegularItalic.woff2)
      format('woff2');
    font-style: italic;
    font-weight: normal;
    font-display: fallback;
  }
`);

  const colors = {
    primaryCore: '#004481',
    // dark background
    primaryCoreDarkened: '#072146',
    primaryCoreLightened: '#ffffff',
    // light background
    primaryCoreDark: '#043263',
    primaryCoreLight: '#1464A5',
    // medium background
    primaryMedium: '#1973B8',
    primaryMediumLight: '#49A5E6',
    primarySubdued: '#5BBEFF',
    primarySubduedLight: '#D4EDFC',
    primaryVariant: '#2DCCCD',
    primaryVariantDark: '#028484',
    primaryVariantDarkened: '#006C6C',
    primaryVariantMedium: '#02A5A5',
    primaryVariantLight: '#5AC4C4',
    primaryVariantLightened: '#EAF9FA',
    secondary600: '#121212',
    secondary500: '#666666',
    secondary400: '#BDBDBD',
    secondary300: '#D3D3D3',
    secondary200: '#E9E9E9',
    secondary100: '#F4F4F4',
    tertiaryType1: '#DA3851',
    tertiaryType1Dark: '#B92A45',
    tertiaryType1Medium: '#C0475E',
    tertiaryType1Light: '#E77D8E',
    tertiaryType1Lightened: '#F4C3CA',
    tertiaryType2: '#F7893B',
    tertiaryType2Dark: '#C65302',
    tertiaryType2Medium: '#D8732C',
    tertiaryType2Light: '#FAB27F',
    tertiaryType2Lightened: '#FDE7D8',
    tertiaryType3: '#F8CD51',
    tertiaryType3Dark: '#9C6C01',
    tertiaryType3Medium: '#C49735',
    tertiaryType3Light: '#FADE8E',
    tertiaryType3Lightened: '#FEF5DC',
    tertiaryType4: '#D8BE75',
    tertiaryType4Dark: '#8E7022',
    tertiaryType4Medium: '#B79E5E',
    tertiaryType4Light: '#E6D5A5',
    tertiaryType4Lightened: '#F3EBD5',
    tertiaryType5: '#F35E61',
    tertiaryType5Dark: '#CB353A',
    tertiaryType5Medium: '#D44B50',
    tertiaryType5Light: '#F59799',
    tertiaryType5Lightened: '#FCDFDF',
    tertiaryType6: '#48AE64',
    tertiaryType6Dark: '#277A3E',
    tertiaryType6Medium: '#388D4F',
    tertiaryType6Light: '#88CA9A',
    tertiaryType6Lightened: '#D9EFE0',
    tertiaryType7: '#F78BE8',
    tertiaryType7Dark: '#AD53A1',
    tertiaryType7Medium: '#C569B9',
    tertiaryType7Light: '#FAB3F0',
    tertiaryType7Lightened: '#FDDCF8',
    tertiaryType8: '#8F7AE5',
    tertiaryType8Dark: '#6754B8',
    tertiaryType8Medium: '#7C6AC7',
    tertiaryType8Light: '#B6A8EE',
    tertiaryType8Lightened: '#DDD7F7'
  };

  const ambients = {
    light: `${colors.primaryCoreLightened}`,
    light100: `${colors.secondary100}`,
    dark: `${colors.primaryCore}`,
    dark100: `${colors.primaryMedium}`,
    dark200: `${colors.primaryCore}`,
    dark300: `${colors.primaryCoreDark}`,
    dark400: `${colors.primaryCoreDarkened}`
  };

  const typography = {
    type9XLarge: '4.25rem',
    // 68px
    type8XLarge: '3rem',
    // 48px
    type7XLarge: '2.5rem',
    // 40px
    type6XLarge: '2.25rem',
    // 36px
    type5XLarge: '2rem',
    // 32px
    type4XLarge: '1.625rem',
    // 26px
    type3XLarge: '1.5rem',
    // 24px
    type2XLarge: '1.375rem',
    // 22px
    typeXLarge: '1.25rem',
    // 20px
    typeLarge: '1.125rem',
    // 18px
    typeMedium: '1rem',
    // 16px
    typeSmall: '0.9375rem',
    // 15px
    typeXSmall: '0.875rem',
    // 14px
    type2XSmall: '0.8125rem',
    // 13px
    type3XSmall: '0.75rem',
    // 12px
    type4XSmall: '0.625rem',
    // 10px
    typeQuoteLarge: '2.25rem',
    // 36px
    typeQuoteMedium: '1.625rem',
    // 26px
    typeQuote: '1.125rem',
    // 18px
    typeLink: '0.9375rem' // 15px

  };

  const lineHeight = {
    type9XLarge: '4.5rem',
    // 72px
    type8XLarge: '3.5rem',
    // 56px
    type7XLarge: '3rem',
    // 48px
    type6XLarge: '2.5rem',
    // 40px
    type5XLarge: '2.5rem',
    // 40px
    type4XLarge: '2rem',
    // 32px
    type3XLarge: '2rem',
    // 32px
    type2XLarge: '2rem',
    // 32px
    typeXLarge: '1.5rem',
    // 24px
    typeLarge: '1.5rem',
    // 24px
    typeMedium: '1.5rem',
    // 24px
    typeSmall: '1.5rem',
    // 24px
    typeXSmall: '1.5rem',
    // 24px
    type2XSmall: '1.5rem',
    // 24px
    type3XSmall: '1rem',
    // 16px
    type4XSmall: '1rem',
    // 16px
    typeQuoteLarge: '3rem',
    // 48px
    typeQuoteMedium: '2rem',
    // 32px
    typeQuote: '1.5rem',
    // 24px
    typeLink: '1rem' // 16px

  };

  const grid = {
    spacer: '8',
    gutter: 32,
    margin: 16,
    breakpoints: {
      xs: {
        max: 599,
        columns: 4
      },
      sm: {
        min: 600,
        columns: 8
      },
      md: {
        min: 992,
        columns: 12,
        maxWidth: 960
      },
      lg: {
        min: 1200,
        columns: 12,
        maxWidth: 1176
      }
    }
  };

  const borderRadius = {
    small: '1px',
    medium: '2px',
    large: '4px'
  };

  const fontFacePrimary = {
    fontFamily: '"Benton Sans"',
    light: {
      fontWeight: 300,
      fontStyle: 'normal'
    },
    book: {
      fontWeight: 400,
      fontStyle: 'normal'
    },
    bookItalic: {
      fontWeight: 400,
      fontStyle: 'italic'
    },
    medium: {
      fontWeight: 500,
      fontStyle: 'normal'
    },
    mediumItalic: {
      fontWeight: 500,
      fontStyle: 'italic'
    },
    regular: {
      fontWeight: 600,
      fontStyle: 'normal'
    },
    bold: {
      fontWeight: 700,
      fontStyle: 'normal'
    }
  };

  const fontFaceSecondary = {
    fontFamily: '"Tiempos"',
    regular: {
      fontWeight: 'normal',
      fontStyle: 'normal'
    },
    regularItalic: {
      fontWeight: 'normal',
      fontStyle: 'italic'
    }
  };

  const boxShadow = {
    type1: '0 1px 3px 0 rgba(18, 18, 18, .2)',
    // #121212 20% opacity
    type2: '0 1px 3px 0 rgba(18, 18, 18, .3)' // #121212 30% opacity

  };

  const statusColors = {
    success: colors.tertiaryType6Dark,
    successDark: colors.tertiaryType6,
    warning: colors.tertiaryType2Dark,
    warningDark: colors.tertiaryType2,
    error: colors.tertiaryType1Dark,
    errorDark: colors.tertiaryType1,
    pending: colors.primaryCore,
    off: colors.secondary500,
    finance: colors.primaryVariantDark
  };

  setDocumentCustomStyles(css`
  html {
    /* Core (BBVA Core Blue)
    /* ---------------------------------------------- */
    --colorsPrimaryCore: ${unsafeCSS(colors.primaryCore)};
    --colorsPrimaryCoreDarkened: ${unsafeCSS(colors.primaryCoreDarkened)};
    --colorsPrimaryCoreLightened: ${unsafeCSS(colors.primaryCoreLightened)};
    --colorsPrimaryCoreDark: ${unsafeCSS(colors.primaryCoreDark)};
    --colorsPrimaryCoreLight: ${unsafeCSS(colors.primaryCoreLight)};

    /* Medium (BBVA Medium Blue)
    /* ---------------------------------------------- */
    --colorsPrimaryMedium: ${unsafeCSS(colors.primaryMedium)};
    --colorsPrimaryMediumLight: ${unsafeCSS(colors.primaryMediumLight)};

    /* Subdued (BBVA Sky Blue)
    /* ---------------------------------------------- */
    --colorsPrimarySubdued: ${unsafeCSS(colors.primarySubdued)};
    --colorsPrimarySubduedLight: ${unsafeCSS(colors.primarySubduedLight)};

    /* Variant (BBVA Aqua Blue)
    /* ---------------------------------------------- */
    --colorsPrimaryVariant: ${unsafeCSS(colors.primaryVariant)};
    --colorsPrimaryVariantDark: ${unsafeCSS(colors.primaryVariantDark)};
    --colorsPrimaryVariantDarkened: ${unsafeCSS(colors.primaryVariantDarkened)};
    --colorsPrimaryVariantMedium: ${unsafeCSS(colors.primaryVariantMedium)};
    --colorsPrimaryVariantLight: ${unsafeCSS(colors.primaryVariantLight)};
    --colorsPrimaryVariantLightened: ${unsafeCSS(colors.primaryVariantLightened)};

    /* Secondary (BBVA Secondary)
    /* ---------------------------------------------- */
    --colorsSecondary600: ${unsafeCSS(colors.secondary600)};
    --colorsSecondary500: ${unsafeCSS(colors.secondary500)};
    --colorsSecondary400: ${unsafeCSS(colors.secondary400)};
    --colorsSecondary300: ${unsafeCSS(colors.secondary300)};
    --colorsSecondary200: ${unsafeCSS(colors.secondary200)};
    --colorsSecondary100: ${unsafeCSS(colors.secondary100)};

    /* Tertiary (BBVA Tertiary)
    /* ---------------------------------------------- */
    /* Type 1 (BBVA Red)
    /* ---------------------------------------------- */
    --colorsTertiaryType1: ${unsafeCSS(colors.tertiaryType1)};
    --colorsTertiaryType1Dark: ${unsafeCSS(colors.tertiaryType1Dark)};
    --colorsTertiaryType1Medium: ${unsafeCSS(colors.tertiaryType1Medium)};
    --colorsTertiaryType1Light: ${unsafeCSS(colors.tertiaryType1Light)};
    --colorsTertiaryType1Lightened: ${unsafeCSS(colors.tertiaryType1Lightened)};

    /* Type 2 (BBVA Orange)
    /* ---------------------------------------------- */
    --colorsTertiaryType2: ${unsafeCSS(colors.tertiaryType2)};
    --colorsTertiaryType2Dark: ${unsafeCSS(colors.tertiaryType2Dark)};
    --colorsTertiaryType2Medium: ${unsafeCSS(colors.tertiaryType2Medium)};
    --colorsTertiaryType2Light: ${unsafeCSS(colors.tertiaryType2Light)};
    --colorsTertiaryType2Lightened: ${unsafeCSS(colors.tertiaryType2Lightened)};

    /* Type 3 (BBVA Yellow)
    /* ---------------------------------------------- */
    --colorsTertiaryType3: ${unsafeCSS(colors.tertiaryType3)};
    --colorsTertiaryType3Dark: ${unsafeCSS(colors.tertiaryType3Dark)};
    --colorsTertiaryType3Medium: ${unsafeCSS(colors.tertiaryType3Medium)};
    --colorsTertiaryType3Light: ${unsafeCSS(colors.tertiaryType3Light)};
    --colorsTertiaryType3Lightened: ${unsafeCSS(colors.tertiaryType3Lightened)};

    /* Type 4 (BBVA Sand)
    /* ---------------------------------------------- */
    --colorsTertiaryType4: ${unsafeCSS(colors.tertiaryType4)};
    --colorsTertiaryType4Dark: ${unsafeCSS(colors.tertiaryType4Dark)};
    --colorsTertiaryType4Medium: ${unsafeCSS(colors.tertiaryType4Medium)};
    --colorsTertiaryType4Light: ${unsafeCSS(colors.tertiaryType4Light)};
    --colorsTertiaryType4Lightened: ${unsafeCSS(colors.tertiaryType4Lightened)};

    /* Type 5 (BBVA Coral)
    /* ---------------------------------------------- */
    --colorsTertiaryType5: ${unsafeCSS(colors.tertiaryType5)};
    --colorsTertiaryType5Dark: ${unsafeCSS(colors.tertiaryType5Dark)};
    --colorsTertiaryType5Medium: ${unsafeCSS(colors.tertiaryType5Medium)};
    --colorsTertiaryType5Light: ${unsafeCSS(colors.tertiaryType5Light)};
    --colorsTertiaryType5Lightened: ${unsafeCSS(colors.tertiaryType5Lightened)};

    /* Type 6 (BBVA Green)
    /* ---------------------------------------------- */
    --colorsTertiaryType6: ${unsafeCSS(colors.tertiaryType6)};
    --colorsTertiaryType6Dark: ${unsafeCSS(colors.tertiaryType6Dark)};
    --colorsTertiaryType6Medium: ${unsafeCSS(colors.tertiaryType6Medium)};
    --colorsTertiaryType6Light: ${unsafeCSS(colors.tertiaryType6Light)};
    --colorsTertiaryType6Lightened: ${unsafeCSS(colors.tertiaryType6Lightened)};

    /* Type 7 (BBVA Pink)
    /* ---------------------------------------------- */
    --colorsTertiaryType7: ${unsafeCSS(colors.tertiaryType7)};
    --colorsTertiaryType7Dark: ${unsafeCSS(colors.tertiaryType7Dark)};
    --colorsTertiaryType7Medium: ${unsafeCSS(colors.tertiaryType7Medium)};
    --colorsTertiaryType7Light: ${unsafeCSS(colors.tertiaryType7Light)};
    --colorsTertiaryType7Lightened: ${unsafeCSS(colors.tertiaryType7Lightened)};

    /* Type 8 (BBVA Purple)
    /* ---------------------------------------------- */
    --colorsTertiaryType8: ${unsafeCSS(colors.tertiaryType8)};
    --colorsTertiaryType8Dark: ${unsafeCSS(colors.tertiaryType8Dark)};
    --colorsTertiaryType8Medium: ${unsafeCSS(colors.tertiaryType8Medium)};
    --colorsTertiaryType8Light: ${unsafeCSS(colors.tertiaryType8Light)};
    --colorsTertiaryType8Lightened: ${unsafeCSS(colors.tertiaryType8Lightened)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --ambientsLight: ${unsafeCSS(ambients.light)};
    --ambientsLight100: ${unsafeCSS(ambients.light100)};
    --ambientsDark: ${unsafeCSS(ambients.dark)};
    --ambientsDark100: ${unsafeCSS(ambients.dark100)};
    --ambientsDark200: ${unsafeCSS(ambients.dark200)};
    --ambientsDark300: ${unsafeCSS(ambients.dark300)};
    --ambientsDark400: ${unsafeCSS(ambients.dark400)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --typographyType9XLarge: ${unsafeCSS(typography.type9XLarge)};
    --typographyType8XLarge: ${unsafeCSS(typography.type8XLarge)};
    --typographyType7XLarge: ${unsafeCSS(typography.type7XLarge)};
    --typographyType6XLarge: ${unsafeCSS(typography.type6XLarge)};
    --typographyType5XLarge: ${unsafeCSS(typography.type5XLarge)};
    --typographyType4XLarge: ${unsafeCSS(typography.type4XLarge)};
    --typographyType3XLarge: ${unsafeCSS(typography.type3XLarge)};
    --typographyType2XLarge: ${unsafeCSS(typography.type2XLarge)};
    --typographyTypeXLarge: ${unsafeCSS(typography.typeXLarge)};
    --typographyTypeLarge: ${unsafeCSS(typography.typeLarge)};
    --typographyTypeMedium: ${unsafeCSS(typography.typeMedium)};
    --typographyTypeSmall: ${unsafeCSS(typography.typeSmall)};
    --typographyTypeXSmall: ${unsafeCSS(typography.typeXSmall)};
    --typographyType2XSmall: ${unsafeCSS(typography.type2XSmall)};
    --typographyType3XSmall: ${unsafeCSS(typography.type3XSmall)};
    --typographyType4XSmall: ${unsafeCSS(typography.type4XSmall)};
    --typographyTypeQuoteLarge: ${unsafeCSS(typography.typeQuoteLarge)};
    --typographyTypeQuoteMedium: ${unsafeCSS(typography.typeQuoteMedium)};
    --typographyTypeQuote: ${unsafeCSS(typography.typeQuote)};
    --typographyTypeLink: ${unsafeCSS(typography.typeLink)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --lineHeightType9XLarge: ${unsafeCSS(lineHeight.type9XLarge)};
    --lineHeightType8XLarge: ${unsafeCSS(lineHeight.type8XLarge)};
    --lineHeightType7XLarge: ${unsafeCSS(lineHeight.type7XLarge)};
    --lineHeightType6XLarge: ${unsafeCSS(lineHeight.type6XLarge)};
    --lineHeightType5XLarge: ${unsafeCSS(lineHeight.type5XLarge)};
    --lineHeightType4XLarge: ${unsafeCSS(lineHeight.type4XLarge)};
    --lineHeightType3XLarge: ${unsafeCSS(lineHeight.type3XLarge)};
    --lineHeightType2XLarge: ${unsafeCSS(lineHeight.type2XLarge)};
    --lineHeightTypeXLarge: ${unsafeCSS(lineHeight.typeXLarge)};
    --lineHeightTypeLarge: ${unsafeCSS(lineHeight.typeLarge)};
    --lineHeightTypeMedium: ${unsafeCSS(lineHeight.typeMedium)};
    --lineHeightTypeSmall: ${unsafeCSS(lineHeight.typeSmall)};
    --lineHeightTypeXSmall: ${unsafeCSS(lineHeight.typeXSmall)};
    --lineHeightType2XSmall: ${unsafeCSS(lineHeight.type2XSmall)};
    --lineHeightType3XSmall: ${unsafeCSS(lineHeight.type3XSmall)};
    --lineHeightType4XSmall: ${unsafeCSS(lineHeight.type4XSmall)};
    --lineHeightTypeQuoteLarge: ${unsafeCSS(lineHeight.typeQuoteLarge)};
    --lineHeightTypeQuoteMedium: ${unsafeCSS(lineHeight.typeQuoteMedium)};
    --lineHeightTypeQuote: ${unsafeCSS(lineHeight.typeQuote)};
    --lineHeightTypeLink: ${unsafeCSS(lineHeight.typeLink)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --gridSpacer: ${unsafeCSS(grid.spacer)};
    --gridGutter: ${unsafeCSS(grid.gutter)};
    --gridMargin: ${unsafeCSS(grid.margin)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --borderRadiusSmall: ${unsafeCSS(borderRadius.small)};
    --borderRadiusMedium: ${unsafeCSS(borderRadius.medium)};
    --borderRadiusLarge: ${unsafeCSS(borderRadius.large)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --boxShadowType1: ${unsafeCSS(boxShadow.type1)};
    --boxShadowType2: ${unsafeCSS(boxShadow.type2)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --statusColorsSuccess: ${unsafeCSS(statusColors.success)};
    --statusColorsSuccessDark: ${unsafeCSS(statusColors.successDark)};
    --statusColorsWarning: ${unsafeCSS(statusColors.warning)};
    --statusColorsWarningDark: ${unsafeCSS(statusColors.warningDark)};
    --statusColorsError: ${unsafeCSS(statusColors.error)};
    --statusColorsErrorDark: ${unsafeCSS(statusColors.errorDark)};
    --statusColorsPending: ${unsafeCSS(statusColors.pending)};
    --statusColorsOff: ${unsafeCSS(statusColors.off)};
    --statusColorsFinance: ${unsafeCSS(statusColors.finance)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --fontFacePrimaryFontFamily: ${unsafeCSS(fontFacePrimary.fontFamily)};

    --fontFacePrimaryLightFontWeight: ${unsafeCSS(fontFacePrimary.light.fontWeight)};
    --fontFacePrimaryLightFontStyle: ${unsafeCSS(fontFacePrimary.light.fontStyle)};

    --fontFacePrimaryBookFontWeight: ${unsafeCSS(fontFacePrimary.book.fontWeight)};
    --fontFacePrimaryBookFontStyle: ${unsafeCSS(fontFacePrimary.book.fontStyle)};

    --fontFacePrimaryBookItalicFontWeight: ${unsafeCSS(fontFacePrimary.bookItalic.fontWeight)};
    --fontFacePrimaryBookItalicFontStyle: ${unsafeCSS(fontFacePrimary.bookItalic.fontStyle)};

    --fontFacePrimaryMediumFontWeight: ${unsafeCSS(fontFacePrimary.medium.fontWeight)};
    --fontFacePrimaryMediumFontStyle: ${unsafeCSS(fontFacePrimary.medium.fontStyle)};

    --fontFacePrimaryMediumItalicFontWeight: ${unsafeCSS(fontFacePrimary.mediumItalic.fontWeight)};
    --fontFacePrimaryMediumItalicFontStyle: ${unsafeCSS(fontFacePrimary.mediumItalic.fontStyle)};

    --fontFacePrimaryRegularFontWeight: ${unsafeCSS(fontFacePrimary.regular.fontWeight)};
    --fontFacePrimaryRegularFontStyle: ${unsafeCSS(fontFacePrimary.regular.fontStyle)};

    --fontFacePrimaryBoldFontWeight: ${unsafeCSS(fontFacePrimary.bold.fontWeight)};
    --fontFacePrimaryBoldFontStyle: ${unsafeCSS(fontFacePrimary.bold.fontStyle)};
  }
`);

  setDocumentCustomStyles(css`
  html {
    --fontFaceSecondaryFontFamily: ${unsafeCSS(fontFaceSecondary.fontFamily)};

    --fontFaceSecondaryRegularFontWeight: ${unsafeCSS(fontFaceSecondary.regular.fontWeight)};
    --fontFaceSecondaryRegularFontStyle: ${unsafeCSS(fontFaceSecondary.regular.fontStyle)};

    --fontFaceSecondaryRegularItalicFontWeight: ${unsafeCSS(fontFaceSecondary.regularItalic.fontWeight)};
    --fontFaceSecondaryRegularItalicFontStyle: ${unsafeCSS(fontFaceSecondary.regularItalic.fontStyle)};
  }
`);

  /**
  The basic rules and guidelines (the How) that effect everything else in the design system.
  */

  setDocumentCustomStyles(css`
  html {
    font-family: 'Benton Sans', sans-serif;
  }
`);

  setDocumentCustomStyles(css`
  #iframeBody {
    margin: 0;
    padding: 1rem;
  }
`);

  /**
  `BbvaCoreMeta` is based on Polymer's `iron-meta`, and it is a generic class you can use for sharing information across the
  DOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)
  such that any instance of it has access to the shared information.
  You can use `BbvaCoreMeta` to share whatever you want.

  The `BbvaCoreMeta` instances contain your actual data.
  The only requirement is that you create them before you try to access them.
  */
  class BbvaCoreMeta {
    constructor(options) {
      this.type = options && options.type || 'default';
      this.key = options && options.key;
      BbvaCoreMeta.classFieldTypes(); // https://developers.google.com/web/updates/2018/12/class-fields

      if (options && 'value' in options) {
        this.value = options.value;
      }
    }
    /**
     * Sets types property if it does not exist.
     */


    static classFieldTypes() {
      if (this.types) {
        return;
      }

      this.types = {};
    }
    /**
     * Returns value of instance key and type
     */


    get value() {
      const {
        type
      } = this;
      const key = this._key || this.key;
      this._key = undefined;

      if (type && key) {
        return BbvaCoreMeta.types[type] && BbvaCoreMeta.types[type][key];
      }

      return undefined;
    }
    /**
     * Sets value to instance type and key
     * @param {*} key Value to set
     */


    set value(value) {
      let {
        type
      } = this;
      const {
        key
      } = this;

      if (type && key) {
        BbvaCoreMeta.types[type] = BbvaCoreMeta.types[type] || {};
        type = BbvaCoreMeta.types[type];

        if (value === null) {
          delete type[key];
        } else {
          type[key] = value;
        }
      }
    }
    /**
     * Returns list of keys of instance type
     */


    get list() {
      const {
        type
      } = this;

      if (type) {
        const itemsType = BbvaCoreMeta.types[type];

        if (itemsType) {
          return Object.keys(itemsType).map(itemType => itemsType[itemType], this);
        }

        return [];
      }

      return undefined;
    }
    /**
     * Returns value of provided key
     * @param {*} key
     */


    byKey(key) {
      this._key = key;
      return this.value;
    }

  }

  exports.BbvaCoreMeta = BbvaCoreMeta;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=component.js.map
