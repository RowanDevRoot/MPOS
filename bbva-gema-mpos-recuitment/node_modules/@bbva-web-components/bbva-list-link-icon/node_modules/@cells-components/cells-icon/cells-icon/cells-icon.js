import { LitElement, html, } from 'lit-element';
import { CellsIronMeta, } from '@cells-components/cells-iron-meta/cells-iron-meta.js';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import styles from './cells-icon-styles.js';
/**

This component displays an icon. It is based on Polymer's [iron-icon](https://www.webcomponents.org/element/@polymer/iron-icon) element.
By default an icon renders as a 24px square.

You can use an image as icon, or use icons from an imported iconset.

```html
  <cells-icon src="demo/location.png"></cells-icon>
  <cells-icon icon="coronita:close"></cells-icon>
```

## Icons

Since this component uses icons, it will need an [iconset](https://platform.bbva.com/en-us/developers/engines/cells/documentation/cells-architecture/components/components-in-depth/icons) in your project as an application level dependency. In fact, this component uses an iconset in its demo.

## Styling

The following custom properties are available for styling:

### Custom Properties
| Custom Property           | Selector | CSS Property | Value                                           |
|:--------------------------|:---------|:-------------|:------------------------------------------------|
| --cells-icon-fill-color   | :host    | fill         | currentcolor                                    |
| --cells-icon-stroke-color | :host    | stroke       | none                                            |
| --cells-icon-width        | :host    | width        | var(--cells-icon-size, --cells-icon-svg-width)  |
| --cells-icon-height       | :host    | height       | var(--cells-icon-size, --cells-icon-svg-height) |

 * @customElement
 * @litElement
 * @polymer
 * @demo demo/index.html
 * @extends {LitElement}
 */
export class CellsIcon extends LitElement {
  static get is() {
    return 'cells-icon';
  }

  static get styles() {
    return [
      styles,
      getComponentSharedStyles('cells-icon-shared-styles')
    ];
  }

  render() {
    return html`
      <slot></slot>
    `;
  }

  static get properties() {
    return {
      /**
       * The name of the icon to use. The name should be of the form:
       * `iconset_name:icon_name`.
       */
      icon: { type: String, },

      /**
       * The name of the theme to use, if one is specified by the iconset.
       */
      theme: { type: String, },

      /**
       * If using iron-icon without an iconset, you can set the src to be
       * the URL of an individual icon image file.
       */
      src: { type: String, },

      /**
       * Size (in px) for the icon
       */
      size: { type: Number, },

      /**
       * Width for icons
       */
      width: { type: Number },

      /**
       * Height for icons
       */
      height: { type: Number },

      _isAttached: { type: Boolean,},
    };
  }

  constructor() {
    super();
    this._iconsetListenerCallback = this._updateIcon.bind(this);
    this._meta = new CellsIronMeta({
      type: 'iconset',
    });
  }

  connectedCallback() {
    super.connectedCallback();
    this._isAttached = true;
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    this._isAttached = false;
  }

  get _DEFAULT_ICONSET() {
    return 'icons';
  }

  updated(changedProps) {
    if (changedProps.has('_meta') || changedProps.has('theme') || changedProps.has('_isAttached')) {
      this._updateIcon();
    }
    if (changedProps.has('src') || changedProps.has('_isAttached')) {
      this._srcChanged(this.src);
    }
    if (changedProps.has('icon') || changedProps.has('_isAttached')) {
      this._iconChanged(this.icon);
    }
    if (changedProps.has('size')) {
      this.style.setProperty('--cells-icon-size', (this.size / 16) + 'rem');
    }
    if (changedProps.has('width')) {
      this.style.setProperty('--cells-icon-svg-width', (this.width / 16) + 'rem');
    }
    if (changedProps.has('height')) {
      this.style.setProperty('--cells-icon-svg-height', (this.height / 16) + 'rem');
    }
  }

  _iconChanged(icon) {
    if (icon === undefined || icon === 'undefined') {
      return;
    }

    var parts = (icon || '').split(':');
    this._iconName = parts.pop();
    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;
    this._updateIcon();
  }

  _srcChanged() {
    this._updateIcon();
  }

  _usesIconset() {
    return this.icon || !this.src;
  }

  _updateIcon() {
    if (this._usesIconset()) {
      if (this._img && this._img.parentNode) {
        this.removeChild(this._img);
      }
      if (this._iconName === '') {
        if (this._iconset) {
          this._iconset.removeIcon(this);
        }
      } else if (this._iconsetName && this._meta) {
        this._iconset = /** @type {?Polymer.Iconset} */ (
          this._meta.byKey(this._iconsetName));
        if (this._iconset) {
          this._iconset.applyIcon(this, this._iconName, this.theme);
          window.removeEventListener('iron-iconset-added', this._iconsetListenerCallback);
        } else {
          window.addEventListener('iron-iconset-added', this._iconsetListenerCallback);
        }
      }
    } else {
      if (this._iconset) {
        this._iconset.removeIcon(this);
      }
      if (!this._img) {
        this._img = document.createElement('img');
        this._img.style.width = '100%';
        this._img.style.height = '100%';
        this._img.draggable = false;
      }
      this._img.src = this.src;
      this.appendChild(this._img);
    }
  }
}

customElements.define(CellsIcon.is, CellsIcon);
