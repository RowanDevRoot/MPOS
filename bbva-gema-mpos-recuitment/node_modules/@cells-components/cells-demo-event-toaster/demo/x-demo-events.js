import { html, LitElement, } from 'lit-element';
/**
 * @customElement
 * @extends {LitElement}
 */
class XDemoEvents extends LitElement {
  render() {
    return html`
      <style>
        :host {
          display: block;
        }
        button {
          display:block;
          width:94%;
          padding: 0.7em 0.57em;
          margin: .75rem auto;
          position: relative;
          box-sizing: border-box;
          text-transform: uppercase;
          outline-width: 0;
          border-radius: 3px;
          border: 0;
          font-size:.92rem;
          background-color: #004481;
          color: #fff;
        }
        section {
          background: #f5f4f4;
          padding: 1rem;
          margin: 2rem 0;
          font-family: sans-serif;
          font-size:.9rem;
        }
      </style>
      <section id="dummy">Dummy element</section>
      <button @click="${this._fireOne}">Simple event</button>
      <button @click="${this._fireTwo}">Event with payload</button>
      <button @click="${this._fireThree}">Event with Object as payload</button>
      <button @click="${this._fireFourth}">Event with Dummy Element (SECTION) as payload</button>
      <button @click="${this._fireFive}">Event with falsy payload</button>
    `;
  }
  static get properties() {
    return {};
  }

  _fireOne() {
    this.dispatchEvent(new CustomEvent('one-event', {
      bubbles: true,
      composed: true,
    }));
  }

  _fireTwo() {
    this.dispatchEvent(new CustomEvent('two-event', {
      bubbles: true,
      composed: true,
      detail: 'String as payload',
    }));
  }

  _fireThree() {
    this.dispatchEvent(new CustomEvent('three-event', {
      bubbles: true,
      composed: true,
      detail: { if: 'one object has payload', },
    }));
  }

  _fireFourth() {
    this.dispatchEvent(new CustomEvent('fourth-event', {
      bubbles: true,
      composed: true,
      detail: this.shadowRoot.querySelector('#dummy'),
    }));
  }

  _fireFive() {
    this.dispatchEvent(new CustomEvent('five-event', {
      bubbles: true,
      composed: true,
      detail: 0,
    }));
  }
}

customElements.define('x-demo-events', XDemoEvents);
