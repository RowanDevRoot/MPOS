@import "baseNameStyles";

// Create CSS Variable and ***unsafeCSS*** string. (a.k.a simple CSS-in-JS)
// --------------------------------------------------------------------------------
// @param [string] $arg
// --------------------------------------------------------------------------------
// @param [string] $baseName
// --------------------------------------------------------------------------------
// @return [string]
@function fallbackVar($arg, $baseName: $baseNameStyles) {
  $part0: #{"var(--"};
  $part1: #{", ${unsafeCSS("};
  $part2: #{")}"};
  $part3: #{")"};
  $baseNameLength: str-length($baseName) + 1;

  @return $part0 + camelize($arg, $baseNameLength) + $part1 + $arg + $part2 + $part3;
}

//*---------------
//Convert PX to 8-Point BBVA Design System:
//Returns a CSS calc function with a custom CSS property with its fallback value - **Default: foundations.grid.spacer**
//It is necessary to use the value in PX
//It can be used as final unit:  "rem, em and px"
//EM for Padding
//REM for Margin
// **
// Spacer unit to rems
// calcSpacer(32px);
// css final: margin-bottom: calc(((4 * var(--gridSpacer, 8)) / 16) * 1rem);
// **
// Spacer unit to em -- if the parent font-size is 16px
// calcSpacer(32px, em);
// css final: margin-bottom: calc(((4 * var(--gridSpacer, 8)) / 16) * 1em);
// **
// Spacer unit to ems -- if the parent font-size is another value, say 15px
// eg. for a relational value of 8px write calcSpacer(8px, em) when the parent is 16px.
// If the parent is another value say 15px write calcSpacer(8px, em, 15px)
//
// calcSpacer(32px, em, 15px);
// css final: margin-bottom: calc(((4 * var(--gridSpacer, 8)) / 15) * 1em);
// **
// Spacer unit to px
// calcSpacer(32px, px);
// css final: margin-bottom: calc( 4 * var(--gridSpacer, 8) * 1px);
// --------------------------------------------------------------------------------
// @param [string] $string
// @param [string] $unit
// @param [string] $base-font-size
// --------------------------------------------------------------------------------
// @return [string]
//*---------------
@function calcSpacer($spacerValue, $unit: rem, $base-font-size: 16, $baseGridSpacerValue: 8) {
  @if not is-number($spacerValue) {
    @error "calcSpacer"$spacerValue "is not a number";
  }

  @if unitless($spacerValue) {
    @error "calcSpacer"$spacerValue "it is necessary to use units in pixels";
  }

  $stripSpacerValue: strip-units($spacerValue);
  $spacerValueUnit: to-unit($spacerValue);

  @if $spacerValueUnit != "px" {
    @error "calcSpacer"$spacerValue "the units have to be in pixels";
  }

  $stripSpacerValue: $stripSpacerValue / $baseGridSpacerValue;

  $stripBaseFontSize: strip-units($base-font-size);
  $part1: fallbackVar($baseGridSpacer);
  $part2: "";
  $partD: #{"/"};
  $partM: #{"*"};

  @if $unit == "rem" {
    $part2: #{"* 1rem"};
  }

  @if $unit == "em" {
    $part2: #{"* 1em"};
  }

  @if $unit == "px" {
    $part2: #{"* 1px"};

    @return calc( #{$stripSpacerValue} #{$partM} var(--gridSpacerVariant, #{$part1}) #{$part2});
  }

  @return calc(((#{$stripSpacerValue} #{$partM} var(--gridSpacerVariant, #{$part1})) #{$partD} #{$stripBaseFontSize}) #{$part2});
}

@function grid8Spacer($spacerValue, $unit: rem, $base-font-size: 16) {
  @return calcSpacer($spacerValue, $unit, $base-font-size, 8);
}

///// Utils

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

// Capitalize string
// --------------------------------------------------------------------------------
// @param [string] $string
// --------------------------------------------------------------------------------
// @return [string]

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// Alias
@function str-ucfirst($string) {
  @return capitalize($string);
}

// Uncapitalize string
// --------------------------------------------------------------------------------
// @param [string] $string
// --------------------------------------------------------------------------------
// @return [string]

@function uncapitalize($string) {
  @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// Alias
@function str-lcfirst($string) {
  @return uncapitalize($string);
}

// Capitalize each word in string
// --------------------------------------------------------------------------------
// @param [string] $string
// --------------------------------------------------------------------------------
// @return [string]

@function str-ucwords($string) {
  $progress: $string;
  $result: "";

  $running: true;

  @while $running {
    $index: str-index($progress, " ");

    @if $index {
      $result: $result + capitalize(str-slice($progress, 1, $index));
      $progress: str-slice($progress, $index + 1);
    }
    @else {
      $running: false;
    }
  }

  @return capitalize($result) + capitalize($progress);
}

// Return whether `$value` is contained in `$list`
// --------------------------------------------------------------------------------
// @param [list] $list
// @param [$value] $value
// --------------------------------------------------------------------------------
// @return [boolean]

@function contain($list, $value) {
  @return not not index($list, $value);
}

// Camelize string with the possibility of truncating the argument/string
// --------------------------------------------------------------------------------
// @param [string] $string
// @param [number] $sliceLength
// --------------------------------------------------------------------------------
// @return [string]

@function camelize($string, $sliceLength: 0) {
  $progress: $string;
  $result: "";
  $exclude: " ", "-", "–", "—", "_", ",", ";", ":", ".", "[", "]", '"', "'";

  @while str-length($progress) > 0 {
    $char: str-slice($progress, 1, 1);

    @if contain($exclude, $char) {
      $progress: capitalize(str-slice($progress, 2, 2)) + str-slice($progress, 3);
    }
    @else {
      $result: $result + $char;
      $progress: str-slice($progress, 2);
    }
  }

  @return uncapitalize(str-slice($result, $sliceLength));
}

// Return TRUE if first chart is:
// "number (0 1 2 3 4 5 6 7 8 9)" : 12px
// "minus (-)" : -12px
// "dot (.)" .5rem
// or FALSE
// --------------------------------------------------------------------------------
// @param [string] $value
// --------------------------------------------------------------------------------
// @return [boolean]
@function is-number($value) {
  $char: str-slice(#{$value}, 0, 1);

  @if not contain("." "-" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9", $char) {
    @return false;
  }

  @return true;
}

// Return whether Unit Value
// 'px', 'rem', 'em', '%', 'vw', 'vmin', ...
// --------------------------------------------------------------------------------
// @param [string] $value
// --------------------------------------------------------------------------------
// @return [string]
@function to-unit($value) {
  $unitsToOne: $value * 0 + 1;
  $unitsString: str-slice(#{$unitsToOne}, 2, str-length(#{$unitsToOne}));

  @return $unitsString;
}
