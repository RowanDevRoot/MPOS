/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
import { LitElement, html } from 'lit-element';
import {ifDefined} from 'lit-html/directives/if-defined';
import '../cells-selector.js';

class TestContentElement extends LitElement {
  static get is() {
    return 'test-content-element';
  }
  static get properties() {
    return {
      selectable: {
        type: String
      },
      selected: {
        type: String
      }
    }
  }

  updated(changedProps) {
    if (changedProps.has('selected')) {
      this.dispatchEvent(new CustomEvent('selected-changed', {
        detail: {
          value: this.selected
        }
      }));
    }
  }

  render() {
    return html`
      <cells-selector id="selector" selected="${this.selected}" @selected-changed="${this._setSelected}" selectable="${ifDefined(this.selectable)}" attr-for-selected="id">
        <slot></slot>
      </cells-selector>
    `;
  }

  get selector() {
    return this.shadowRoot.querySelector('#selector');
  }

  _setSelected(e) {
    if (e.detail && e.detail.value) {
      this.selected = e.detail.value;
    }
  }
}
customElements.define(TestContentElement.is, TestContentElement);
