
/**
@license
Copyright Â© 2016-2018 Component Kitchen, Inc. and contributors to the Elix project

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
import { dedupingMixin, } from '@cells-components/cells-lit-helpers/utils/mixin.js';

/**
 * Symbol for the `contentSlot` property.
 *
 * [CellsSlotsContentMixin](CellsSlotsContentMixin) uses this to identify which slots
 * elements in the component's shadow tree that holds the component's content.
 * You can override this to return a different slot.
 *
 * @returns {Element[]} Slots contents and slot itself
 */
export const contentSlots = Symbol('contentSlots');

/**
 * Defines a component's content as the flattened set of nodes assigned to a
 * slot.
 *
 * This helps a component satisfy the Gold Standard checklist item for
 * monitoring
 * [Content Changes](https://github.com/webcomponents/gold-standard/wiki/Content-Changes).
 *
 * By default, the mixin looks in the component's shadow subtree for all `slot` elements.
 * You can specify that a different slot should be used by overriding the `symbols.contentSlots` property.
 *
 * @module CellsSlotsContentMixin
 */
export const CellsSlotsContentMixin = dedupingMixin(Base => {
  return class CellsSlotsContent extends Base {
    constructor() {
      super();
      this.contentSlots = [];
    }

    firstUpdated() {
      super.firstUpdated && super.firstUpdated();
      this.contentSlots = this[contentSlots];

      Array.from(this.contentSlots).filter(Boolean).forEach((contentSlot) => {
        contentSlot.addEventListener('slotchange', (event) => {
          const slotName = contentSlot.name;
          const contents = contentSlot.assignedNodes({ flatten: true });
          const contentsWithNode = [];
          if (contents.length) {
            contents.forEach((content) => {
              const nodeTypeIsText = content.nodeType === 3;
              const onlyContentSpaceWhite = !(/[^\t\n\r ]/.test(content.textContent));
              if ((nodeTypeIsText && !onlyContentSpaceWhite) || content.nodeType !== 3) {
                contentsWithNode.push({
                  'assignedNodes': nodeTypeIsText ? content.textContent.trim() : content,
                  'assignedSlot': content.assignedSlot,
                });
              }
            });
          }

          this.dispatchEvent(new CustomEvent('slotschanges', {
            detail: {
              'slotName': slotName,
              'contentSlots': contentsWithNode,
              'originalEvent': event
            },
          }));
        });
      });
    }

    /**
     * See [contentSlots](symbols#contentSlots).
     * If you want to use a specific slot, override this
     * property and return an array containing the implicated slot.
     */
    get [contentSlots]() {
      const slots = this.shadowRoot && this.shadowRoot.querySelectorAll('slot');
      if (!this.shadowRoot || !slots.length) {
        /* eslint-disable no-console */
        console.warn(`CellsSlotsContentMixin expects ${this.constructor.name} to define a shadow tree that includes a default slot.`);
      }
      return slots;
    }
  };
});
