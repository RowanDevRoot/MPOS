import { LitElement, html, } from 'lit-element';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import '@cells-components/cells-icon';
import styles from './cells-demo-radio-tabs-styles.js';
/**
`<cells-demo-radio-tabs>` displays a list of tabs from its `options` property.
The `options` property can be an array of strings or an array of objects with an optional `icon` property and a `label` property that will be used as the tab text.

Example with simple options:

```html
<cells-demo-radio-tabs options='["Home", "Accounts"]'></cells-demo-radio-tabs>
```

Example with text and icons:

```html
<cells-demo-radio-tabs options='[{
  "icon": "coronita:home",
  "label": "Home"
}, {
  "icon": "coronita:alarm",
  "label": "Alerts"
}]'></cells-demo-radio-tabs>
```

## Icons

Since this component uses icons, it will need an [iconset](https://bbva.cellsjs.com/guides/best-practices/cells-icons.html) in your project as an [application level dependency](https://bbva.cellsjs.com/guides/advanced-guides/application-level-dependencies.html). In fact, this component uses an iconset in its demo.

## Styling

The following custom properties and mixins are available for styling:

## Styling

The following custom properties and mixins are available for styling:

### Custom Properties
| Custom Property                             | Selector                      | CSS Property     | Value                |
| ------------------------------------------- | ----------------------------- | ---------------- | -------------------- |
| --cells-demo-radio-tabs-color               | :host                         | color            | --bbva-300           |
| --cells-demo-radio-tabs-item-height         | :host                         | height           | 3.4375rem            |
| --cells-demo-radio-tabs-bg-color            | :host                         | background-color | --bbva-white         |
| --cells-demo-radio-tabs-border-radius       | :host                         | border-radius    | `No fallback value`  |
| --cells-demo-radio-tabs-option-flex         | label                         | flex             | 1                    |
| --cells-demo-radio-tabs-border-bottom-color | label                         | border-bottom    | 1px solid --bbva-200 |
| --cells-demo-radio-tabs-color-selected      | label:focus .tab-content      | color            | --bbva-core-blue     |
| --cells-demo-radio-tabs-color-selected      | input[checked] + .tab-content | color            | --bbva-core-blue     |
| --cells-demo-radio-tabs-icon-margin         | .icon                         | margin           | 0 0.625rem 0 0       |
| --cells-demo-radio-tabs-item-width          | #indicator                    | width            | `No fallback value`  |
| --cells-demo-radio-tabs-border-radius       | #indicator                    | border-radius    | `No fallback value`  |
| --cells-demo-radio-tabs-indicator-bg-color  | #indicator                    | background-color | --bbva-core-blue     |
### @apply
| Mixins                               | Selector                      | Value |
| ------------------------------------ | ----------------------------- | ----- |
| --cells-demo-radio-tabs              | :host                         | {}    |
| --cells-demo-radio-tabs-option       | label                         | {}    |
| --cells-demo-radio-tabs-option-focus | label:focus .tab-content      | {}    |
| --cells-demo-radio-tabs-tab-hover    | label:hover .tab-content      | {}    |
| --cells-demo-radio-tabs-selected     | input[checked] + .tab-content | {}    |
| --cells-demo-radio-tabs-content      | .tab-content                  | {}    |
| --cells-demo-radio-tabs-icon         | .icon                         | {}    |
| --cells-demo-radio-tabs-indicator    | #indicator                    | {}    |

   * @demo demo/index.html
   * @hero cells-demo-radio-tabs.png
   * @customElement
   * @extends {LitElement}
   */
{
  const KEYS = {
    SPACE: 32,
    ENTER: 13,
  };
  class CellsDemoRadioTabs extends LitElement {
    static get is() {
      return 'cells-demo-radio-tabs';
    }

    static get properties() {
      return {
        /**
         * List of options.
         * Can be an array of Strings used as labels for each tab or Objects with a "label" key and and optional "icon" key to display
         * an icon to the left of the text.
         * @type {Array}
         */
        options: {
          type: Array,
        },

        /**
         * Size for the icons.
         */
        iconSize: {
          type: Number,
          attribute: 'icon-size',
        },

        /**
         * Index of the selected option.
         */
        selected: {
          type: Number,
        },

        _uniqueID: {
          type: Number,
        },

        /**
         * Set to true to fire `tab-mouseevent` event when a tab receives mouseenter / mouseleave.
         */
        notifyMouseEvents: {
          type: Boolean,
          attribute: 'notify-mouse-events',
        },
      };
    }

    constructor() {
      super();
      this.options = [];
      this.iconSize = 24;
      this.selected = 0;
      this._uniqueID = new Date().valueOf();
      this.notifyMouseEvents = false;
    }

    updated(changedProps) {
      if (changedProps.has('options')) {
        this._optionsChanged(this.options, changedProps.get('options'));
      }
      if (changedProps.has('selected')) {
        this.dispatchEvent(new CustomEvent('selected-changed', {
          detail: {
            value: this.selected,
          },
        }));
      }
      if (changedProps.has('selected') || changedProps.has('options')) {
        this._selectedChanged(this.selected, this.options);
      }
    }

    get _hasLabels() {
      return this._computeHasLabels(this.options);
    }

    static get shadyStyles() {
      return `
        ${styles.cssText}
        ${getComponentSharedStyles('cells-demo-radio-tabs-shared-styles').cssText}
        `;
    }

    render() {
      const items = this.options.map((item, index) => html`
        <label
          tabindex="0"
          @click="${(e) => this._setSelected(e, index)}"
          @keydown="${(e) => this._setSelected(e, index)}"
          @mouseenter="${(e) => this._onMouseEvent(e, index)}"
          @mouseleave="${(e) => this._onMouseEvent(e, index)}">
          <input
            type="radio"
            name="cells-demo-radio-tabs-${this._uniqueID}"
            ?checked="${this._computeChecked(this.selected, index)}"
            tabindex="-1">
          <span class="tab-content">
            <cells-icon
              class="icon"
              ?hidden="${!item.icon}"
              .icon="${item.icon}"
              .size="${this.iconSize}">
            </cells-icon>
            <span class="label" ?hidden="${this._hasLabels}">${item}</span>
          <span class="label" ?hidden="${!this._hasLabels}">${item.label}</span>
          </span>
        </label>
      `);

      return html`
      <style>${this.constructor.shadyStyles}</style>
        ${items}
        <div id="indicator" class="indicator"></div>
      `;
    }

    _optionsChanged(newValue, previousValue) {
      if (previousValue && previousValue.length !== newValue.length) {
        this._updateTabStylesAfterResettingSelected();
      } else {
        this._setTabStyles();
      }
    }

    // Prevents changing the width and the position of the indicator at the same time.
    _updateTabStylesAfterResettingSelected() {
      this.classList.add('indicator-hidden');
      this._resetSelected().then(() => {
        this._setTabStyles();
        this.classList.remove('indicator-hidden');
      });
    }

    _resetSelected() {
      return new Promise(resolve => {
        const selectedDoesNotExist = this.options.indexOf(this.options[this.selected]) === -1;
        const timeout = selectedDoesNotExist ? 200 : 0;
        if (selectedDoesNotExist) {
          this.selected = 0;
        }
        setTimeout(resolve, timeout);
      });
    }

    _setTabStyles() {
      this.style.setProperty('--cells-demo-radio-tabs-item-width', 100 / this.options.length + '%');
      /**
       * Fired after updating the tab styles.
       * @event cells-demo-radio-tabs-styles-updated
       * @param {Object} detail.itemWidth width applied to each tab
       */
      this.dispatchEvent(new CustomEvent('cells-demo-radio-tabs-styles-updated', {
        bubbles: true,
        composed: true,
        detail: {
          itemWidth: 100 / this.options.length + '%',
        },
      }));
    }

    /**
     * Selects the item on click event and on keydown only if the key pressed is space or enter.
     * Prevents selecting an item while navigating through tabs using the tab key.
     * @param {Event} e
     * @param {Number} index
     */
    _setSelected(e, index) {
      const keyShouldActiveTab = [KEYS.SPACE, KEYS.ENTER,].indexOf(e.keyCode) !== -1;
      if (e.type !== 'keydown' || keyShouldActiveTab) {
        this.selected = index;
        /**
        * Fired when tab was selected
        * @event selected-tab
        */
        this.dispatchEvent(new CustomEvent('selected-tab', {
          detail: this.selected,
          bubbles: true,
          composed: true,
        }));
      }
    }

    _computeChecked(selected, index) {
      return Number(selected) === index;
    }

    _selectedChanged(selected, options) {
      const selectedItemExists = options.indexOf(options[selected]) !== -1;
      if (selectedItemExists) {
        this.shadowRoot.querySelector('#indicator').style.transform = `translateX(calc(100% * ${selected}))`;
      }
    }

    _computeHasLabels(options) {
      return options.some(option => option.label);
    }

    _onMouseEvent(e, index) {
      /**
       * Fired on tab mouseenter / mouseleave
       * @event tab-mouseevent
       * @param {Number} 'index' Index of the event.target tab
       * @param {String} 'type' Event type (mouseenter | mouseleave)
       */
      if (this.notifyMouseEvents) {
        this.dispatchEvent(new CustomEvent('tab-mouseevent', {
          bubbles: false,
          composed: true,
          detail: {
            index: index,
            type: e.type,
          },
        }));
      }
    }
  }

  window.customElements.define(CellsDemoRadioTabs.is, CellsDemoRadioTabs);
}


