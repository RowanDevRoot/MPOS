import { LitElement, html, } from 'lit-element';
import { ifDefined } from 'lit-html/directives/if-defined.js';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import '@cells-components/cells-icon/cells-icon.js';
import '@cells-components/cells-dropdown-layer/cells-dropdown-layer.js';
import styles from './cells-dropdown-menu-styles.js';
/**
This component uses `cells-dropdown-layer` to show a list of selectable items which can be checked. It works as a select component, and expects an array of items to build the list.

```html
<cells-dropdown-menu placeholder="Default text" items='[...]'></cells-dropdown-layer>
```

```javascript
[{
  'name': 'Lorem ipsum',
  'value': 'loremipsum'
}, {
  'name': 'Lorem ipsum 2',
  'value': 'loremipsum2',
  'icon': 'coronita:creditcard'
}]
```

The menu can be set as required (which will show an error if no option is checked) or disabled. You can limit the amount of visible options at once with the 'maxItemsShown' property.

You can use the 'selected' property to set the currently selected item by index, as well as the 'value' property for the value of the current index.

## Icons

Since this component uses icons, it will need an [iconset](https://platform.bbva.com/en-us/developers/engines/cells/documentation/cells-architecture/composing-with-components/cells-icons) in your project as an application level dependency. In fact, this component uses an iconset in its demo.

## Styling

The following custom properties and mixins are available for styling:

### Custom Properties
| Custom Property                                           | Selector                          | CSS Property                                | Value                                                             |
| --------------------------------------------------------- | --------------------------------- | ------------------------------------------- | ----------------------------------------------------------------- |
| --font-default                                            | :host                             | font-family                                 |  sans-serif                                                       |
| --cells-dropdown-menu-value-color                         | :host                             | --item-value-color                          |  ![#D0D1D4](https://placehold.it/15/D0D1D4/000000?text=+) #D0D1D4 |
| --cells-dropdown-menu-underline-color                     | :host                             | --item-underline-color                      |  ![#565C67](https://placehold.it/15/565C67/000000?text=+) #565C67 |
| --cells-dropdown-menu-highlighted-color                   | :host                             | --item-highlighted-color                    |  ![#FFF](https://placehold.it/15/FFF/000000?text=+) #FFF          |
| --cells-dropdown-menu-haserror-layer-icon-color           | :host([has-error])                | --cells-dropdown-layer-icon-color           |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --cells-dropdown-menu-haserror-layer-underline-color      | :host([has-error])                | --cells-dropdown-layer-underline-color      |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --cells-dropdown-menu-haserror-dark-layer-icon-color      | :host([has-error])                | --cells-dropdown-layer-dark-icon-color      |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --cells-dropdown-menu-haserror-dark-layer-underline-color | :host([has-error])                | --cells-dropdown-layer-dark-underline-color |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --cells-dropdown-menu-item-error-value-color              | .item.error                       | --item-value-color                          |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --cells-dropdown-menu-item-error-highlighted-color        | .item.error                       | --item-highlighted-color                    |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --cells-dropdown-menu-item-error-underline-color          | .item.error                       | --item-underline-color                      |  ![#F970B5](https://placehold.it/15/F970B5/000000?text=+) #F970B5 |
| --item-value-color                                        | .control                          | color                                       | `No fallback value`                                               |
| --item-highlighted-color                                  | .item.highlighted .control .icon  | color                                       | `No fallback value`                                               |
| --item-highlighted-color                                  | .item.highlighted .control .label | color                                       | `No fallback value`                                               |
| --item-highlighted-color                                  | .control .icon-check              | color                                       | `No fallback value`                                               |
| --item-underline-color                                    | .line::after                      | background-color                            | `No fallback value`                                               |
| --item-highlighted-color                                  | .item.highlighted .line::after    | background-color                            | `No fallback value`                                               |
### @apply
| Mixins                                           | Selector                                        | Value |
| ------------------------------------------------ | ----------------------------------------------- | ----- |
| --cells-dropdown-menu                            | :host                                           | {}    |
| --cells-dropdown-menu-haserror                   | :host([has-error])                              | {}    |
| --cells-dropdown-menu-layer                      | .layer                                          | {}    |
| --cells-dropdown-menu-lists                      | .item                                           | {}    |
| --cells-dropdown-menu-item                       | .item                                           | {}    |
| --cells-dropdown-menu-item-error                 | .item.error                                     | {}    |
| --cells-dropdown-menu-item-last                  | .item:last-of-type                              | {}    |
| --cells-dropdown-menu-control                    | .control                                        | {}    |
| --cells-dropdown-menu-control-icon               | .control .icon                                  | {}    |
| --cells-dropdown-menu-control-icon-selected      | .item.highlighted .control .icon                | {}    |
| --cells-dropdown-menu-control-label              | .control .label                                 | {}    |
| --cells-dropdown-menu-control-label-selected     | .item.highlighted .control .label               | {}    |
| --cells-dropdown-menu-control-icon-check         | .control .icon-check                            | {}    |
| --cells-dropdown-menu-control-icon-check-checked | .item[aria-checked="true"] .control .icon-check | {}    |
| --cells-dropdown-menu-line                       | .line                                           | {}    |
| --cells-dropdown-menu-underline                  | .line::after                                    | {}    |
| --cells-dropdown-menu-underline-selected         | .item.highlighted .line::after                  | {}    |

 * @customElement
 * @summary Show a custom select component using cells-dropdown-layer
 * @hero cells-dropdown-menu.png
 * @demo demo/index.html
 * @extends {LitElement}
 */
class cellsDropdownMenu extends LitElement {

  static get is() {
    return 'cells-dropdown-menu';
  }

  static get properties() {
    return {
      /**
       * Items to show in the layer
       * [{
       *   name: 'Item label',
       *   value: 'some-value',
       *   icon: 'iconset:iconname'
       * }]
       */
      items: {
        type: Array
      },

      /**
       * Check icon
       */
      iconCheck: {
        type: String,
        attribute: 'icon-check'
      },

      /**
       * Disabled state of the component
       */
      disabled: {
        type: Boolean,
        reflect: true,
      },

      /**
       * Max items to show at once in the layer (sets a max Height in the layer)
       */
      maxItemsShown: {
        type: Number,
        attribute: 'max-items-shown'
      },

      /**
       * Text to show when no option is selected
       */
      placeholder: {
        type: String
      },

      /**
       * Current label text
       */
      _label: {
        type: String
      },

      /**
       * Prefix for label
       */
      prefix: {
        type: String,
      },

      /**
       * Required status of the component
       */
      required: {
        type: Boolean
      },

      /**
       * Message to show when no option is selected in a required dropdown
       */
      requiredMsg: {
        type: String,
        attribute: 'required-msg'
      },

      /**
       * Opened status
       */
      opened: {
        type: Boolean,
        reflect: true
      },

      /**
       * Currently selected item
       */
      selected: {
        type: Number
      },

      /**
       * Value of currently selected item
       */
      value: {
        type: String
      },

      /**
       * Icon to show to the left of the layer control label
       */
      controlIcon: {
        type: String,
        attribute: 'control-icon'
      },

      /**
       * Disabled icon besides underline
       */
      iconDisabled: {
        type: String,
        attribute: 'icon-disabled'
      },

      /**
       * Icon to show besides underline
       */
      iconOpen: {
        type: String,
        attribute: 'icon-open'
      },

      /**
       * If true, layer can be less wide than control
       */
      controlAsMinWidthOff: {
        type: Boolean,
        attribute: 'control-as-min-width-off'
      },

      /**
       * Min height of layer
       */
      minHeight: {
        type: Number,
        attribute: 'min-height'
      },

      /**
       * Horizontal direction in which layer will open. Allowed values are 'left-to-right', 'right-to-left', 'centered' and 'auto'
       */
      openingX: {
        type: String,
        attribute: 'opening-x'
      },

      /**
       * Vertical direction in which layer will open. Allowed values are 'top-to-bottom', 'bottom-to-top' and 'auto'
       */
      openingY: {
        type: String,
        attribute: 'opening-y'
      },

      /**
       * Minimum distance from layer limits to viewport
       */
      safeMargin: {
        type: Number,
        attribute: 'safe-margin'
      },

      /**
       * Error message
       */
      error: {
        type: String,
      },
    };
  }

  constructor() {
    super();
    this.items = [];
    this.opened = false;
    this.iconCheck = 'coronita:checkmark';
    this.placeholder = '';
    this._label = '';
    this.required = false;
    this.requiredMsg = 'You must select an option';
    this.selected = -1;
  }

  updated(changedProps) {
    if (changedProps.has('items')) {
      this._itemsObserver(this.items, changedProps.get('items'));
    }
    if (changedProps.has('maxItemsShown')) {
      this._maxItemsShown(this.maxItemsShown);
    }
    if (changedProps.has('opened')) {
      this._opened(this.opened);
    }
    if (changedProps.has('selected')) {
      this.dispatchEvent(new CustomEvent('selected-changed', {
        detail: {
          value: this.selected
        }
      }));
      this._selectedObserver(this.selected);
    }
    if (changedProps.has('value')) {
      this.dispatchEvent(new CustomEvent('value-changed', {
        detail: {
          value: this.value
        }
      }));
      /**
       * Fired when value changes
       * @event cells-dropdown-menu-value
       */
      this.dispatchEvent(new CustomEvent('cells-dropdown-menu-value', {
        bubbles: true,
        composed: true,
        detail: this.value,
      }));
    }
  }

  static get shadyStyles() {
    return `
      ${styles.cssText}
      ${getComponentSharedStyles('cells-dropdown-menu-shared-styles')}
    `;
  }

  render() {
    return html`
      <style>${this.constructor.shadyStyles}</style>
      <cells-dropdown-layer
        id="layer"
        class="${this._setClass()}"
        .label="${this._setLabel(this.placeholder, this._label)}"
        .prefix="${this.prefix}"
        ?disabled="${ifDefined(this.disabled)}"
        @opened-changed="${(e) => this._setOpened(e)}"
        ?opened="${this.opened}"
        .icon="${ifDefined(this.controlIcon)}"
        .iconDisabled="${ifDefined(this.iconDisabled)}"
        .iconOpen="${ifDefined(this.iconOpen)}"
        .controlAsMinWidthOff="${ifDefined(this.controlAsMinWidthOff)}"
        .minHeight="${ifDefined(this.minHeight)}"
        .openingX="${ifDefined(this.openingX)}"
        .openingY="${ifDefined(this.openingY)}"
        .safeMargin="${ifDefined(this.safeMargin)}">
        <slot></slot>
        <ul class="list" ?hidden="${!this.items.length}" role="listbox">
          ${this.items.map(item => html`
            <li class="item ${this._setErrorClass(item.error)}" role="option" tabindex="-1" @click="${() => this._itemClick(item)}">
              <div class="control">
                <cells-icon class="icon" icon="${ifDefined(item.icon)}" ?hidden="${!item.icon}"></cells-icon>
                <span class="label">${item.name}</span>
                <cells-icon class="icon-check" icon="${this.iconCheck}"></cells-icon>
              </div>
              <div class="line"></div>
            </li>
          `)}
        </ul>
      </cells-dropdown-layer>
    `;
  }

  get layer() {
    return this.shadowRoot.querySelector('#layer');
  }

  _setOpened(e) {
    this.opened = e.detail.value;
  }

  connectedCallback() {
    super.connectedCallback();
    this.addEventListener('keydown', (e) => {
      this._keyHandler(e);
    });
  }

  /**
   * Open layer
   */
  open() {
    this.layer.open();
  }

  /**
   * Close layer
   */
  close() {
    this.layer.close();
  }

  _maxItemsShown(newValue) {
    var total = newValue * 3 - 1 + 3; // 3rem for the layer paddings, 1rem for the margin bottom 0 of last item
    this.style.setProperty('--cells-dropdown-layer-layer-max-height', total + 'rem');
  }

  _arrowMove(keyCode) {
    var items = this.layer.querySelectorAll('.item');
    var selectedIndex = Array.prototype.indexOf.call(items, this.layer.querySelector('.item.selected'));
    var target;
    if (keyCode === 37 || keyCode === 38) {
      target = selectedIndex === 0 ? items.length - 1 : selectedIndex - 1;
    } else {
      target = selectedIndex === items.length - 1 ? 0 : selectedIndex + 1;
    }
    this._select(items[target]);
  }

  _select(item) {
    this._clearSelected();
    item.focus();
    item.setAttribute('tabindex', 0);
    item.classList.add('selected');
  }

  _clearSelected() {
    var selected = this.layer.querySelector('.item.selected');
    if (selected) {
      selected.setAttribute('tabindex', -1);
      selected.classList.remove('selected');
    }
  }

  _itemClick(item) {
    this._checkItem(item);
    this.close();
    this._restoreFocus();
  }

  _checkItem(item) {
    var index = this.items.indexOf(item);
    this.selected = index;
    this.error = item.error;
    /**
     * Fired when user checks a value in the layer
     * @event cells-dropdown-menu-user-value-changed
     */
    this.dispatchEvent(new CustomEvent('user-selected-changed', {
      bubbles: true,
      composed: true,
      detail: item.value,
    }));
  }

  _opened(newValue) {
    if (!newValue) {
      this._clearSelected();
      if (this.required && !this.value) {
        this.layer.error = this.requiredMsg;
      } else if (this.error) {
        this.layer.error = this.error;
      } else {
        this.layer.error = '';
      }
    }
  }

  _setLabel(placeholder, _label) {
    return !_label ? placeholder : _label;
  }

  _restoreFocus() {
    requestAnimationFrame(() => {
      this.layer.focus();
    });
  }

  _keyHandler(e) {
    var keyCode = e.keyCode;

    if (keyCode >= 37 && keyCode <= 40) {
      e.preventDefault();
      this._arrowPressed(keyCode);
    }

    if (keyCode === 32 || keyCode === 13) {
      e.preventDefault();
      this._selectKeyPressed(e);
    }

    if (keyCode === 27) {
      if (this.opened) {
        this._restoreFocus();
      }
    }
  }

  _arrowPressed(keyCode) {
    var checked;
    var first;
    if (!this.opened) {
      this.open();
      checked = this.layer.querySelector('.item[aria-checked="true"]');
      if (checked) {
        this._select(checked);
      } else {
        first = this.layer.querySelector('.item');
        this._select(first);
      }
    } else {
      var selected = this.layer.querySelector('.item.selected');
      if (!selected) {
        checked = this.layer.querySelector('.item[aria-checked="true"]');
        if (checked) {
          this._select(checked);
        } else {
          first = this.layer.querySelector('.item');
          this._select(first);
        }
      }
      this._arrowMove(keyCode);
    }
  }

  _selectKeyPressed(e) {
    if (!this.opened) {
      this.open();
      var checked = this.layer.querySelector('.item[aria-checked="true"]');
      if (checked) {
        this._select(checked);
      } else {
        var first = this.layer.querySelector('.item');
        this._select(first);
      }
    } else {
      var selected = this.layer.querySelector('.item.selected');
      if (selected) {
        selected.click();
      }
      this.close();
      this._restoreFocus();
    }
  }

  _selectedObserver(newValue) {
    if (newValue > -1 && newValue <= this.items.length - 1 && this.items && this.items.length) {
      var elems = this.layer.querySelectorAll('.item');
      elems.forEach(function(elem, index) {
        elem.setAttribute('aria-checked', false);
      });
      elems[newValue].setAttribute('aria-checked', true);
      this._label = this.items[newValue].name;
      this.value = this.items[newValue].value;
    }
  }

  _itemsObserver(newValue, oldValue) {
    if ((!oldValue || !oldValue.length) && newValue && this.selected > -1) {
      this._selectedObserver(this.selected);
    }
    if (newValue.some(elem => elem.error)) {
      this.setAttribute('has-error', '');
    } else {
      this.removeAttribute('has-error');
    }
  }

  _setClass() {
    return 'layer ' + this.classList.value;
  }

  _setErrorClass(error) {
    return error ? 'error' : '';
  }
}

customElements.define(cellsDropdownMenu.is, cellsDropdownMenu);
