$base-font-size:      16px;
//*---------------
// Convert pixels to ems
// eg. for a relational value of 12px write em(12px) when the parent is 16px
// if the parent is another value say 24px write em(12px, 24px)
@function em($font-size, $context:$base-font-size) {
  @return ($font-size / $context) * 1em;
}
//*---------------
//*---------------
// Convert pixels to rems
// eg. for a relational value of 12px write rem(12px)
// Assumes $base-font-size is the font-size of <html>
//*---------------
@function rem($font-size) {
  @return ($font-size / $base-font-size) * 1rem;
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

//*--------------
//Convert font-size pixel to rem and fallback version px
// @include font-size(12px);
//*---------------
@mixin font-size($font-size, $line-height: false) {
    font-size: $font-size;
    font-size: $font-size / $base-font-size * 1rem;
    @if $line-height == true {
        line-height: ceil($font-size / $base-line-height) * $base-line-height / $font-size;
    }
    @if $line-height == normal {
        line-height: normal;
    }
}

//*---------------
//Convert margin-top pixel to rem and fallback version px
// @include margin-top(12px);
//*---------------
@mixin margin-top($margin-top: 0) {
    margin-top: $margin-top;
    margin-top: $margin-top / $base-font-size + rem;
}

//*---------------
//Convert margin-bottom pixel to rem and fallback version px
// @include margin-bottom(12px);
//*---------------
@mixin margin-bottom($margin-bottom: 0) {
    margin-bottom: $margin-bottom;
    margin-bottom: $margin-bottom / $base-font-size + rem;
}

//*---------------
//Convert 'margin-top and margin-bottom' pixel to rem and fallback version px
// @include margin(12px);
// @include margin(12px,24px);
//*---------------
@mixin margin($margin: 0, $marginb: $margin) {
    margin: $margin 0 $marginb 0;
    margin: $margin / $base-font-size + rem 0 $marginb / $base-font-size + rem 0;
}

//*---------------
// Clear inner floats
//*---------------
@mixin clearfix {
    &:after {
        clear: both;
        content: "";
        display: table;
    }
}

//*---------------
// Hide element while making it readable for screen readers
// Shamelessly borrowed from HTML5Boilerplate:
// https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
//*---------------
@mixin visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

//*---------------
// Sizing shortcuts
//----------------*/
@mixin size($width, $height) {
    width: $width;
    height: $height;
}

@mixin square($size) {
    @include size($size, $size);
}

//*---------------
// Ellipsis on overflow
//----------------*/
@mixin ellipsis{
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

//*---------------
// Reset for list elements
// Must be applied to <ul> or <ol> elements
//
// Usage:
// ul { @include list-unstyled; }
//----------------*/
@mixin list-unstyled {
  list-style: none;
  margin: 0;
  padding: 0;
}

//*---------------
// Reset margin and padding to the elements passed as param
//
// Usage:
// @include reset(h1, h2, p, "ul.my-class");
//----------------*/
@mixin reset($elements...) {
  %reset { margin: 0; padding: 0; }
  @each $element in $elements {
    #{$element} {
      @extend %reset;
    }
  }
}

//*---------------
// Resets user-select: none to its initial value
// user-select: none; is applyed to the body in the app styles
//
// Usage:
// .my-element { @include reset-user-select; }
//----------------*/
@mixin reset-user-select {
  user-select: initial;
}

//*---------------
// Generates fractal background for element through multiple background images with 10% opacity
// Blend mode of images is "multiply" by default
//
// Usage:
// @include bg-fractals(#004481)
//----------------*/
@mixin bg-fractals($color, $blend-mode: multiply) {
  background-image:
    (linear-gradient(to top left, rgba($color,.1) 50%, transparent 50%)),
    (linear-gradient(to top left, rgba($color,.1) 50%, transparent 50%)),
    (linear-gradient(to bottom left, rgba($color,.1) 50%, transparent 50%)),
    (linear-gradient(to top left, rgba($color,.1) 50%, transparent 50%)),
    (linear-gradient(rgba($color,1) 100%, transparent 0));
  background-size:
    92.5% 12%,
    92.5% 30%,
    100% 100%,
    100% 100%,
    100% 100%;
  background-repeat: no-repeat;
  background-position:
    right bottom,
    right bottom,
    left top,
    left top,
    0 0;
  background-blend-mode: $blend-mode;
}

//*---------------
// Multiline ellipsis on overflow.
// IE and Firefox (<68) has no support. As there is no specification and
// the property is dependent on an outdated implementation of flexbox (hence display: -webkit-box)
// it is unlikely that other browsers will support the property as-is, although an alternative solution may at some point replace it.
//
// Usage:
// @include line-clamp;
// or:
// @include line-clamp(3);
//----------------*/
$base-elipsis-lines: 2;

@mixin line-clamp($lines:$base-elipsis-lines) {
  display: -webkit-box;
  overflow: hidden;
  -webkit-line-clamp: $lines;
  /* autoprefixer: off */
  -webkit-box-orient: vertical;
  /* autoprefixer: on */
}

//*---------------
// Utility function which emulates javascript split function.
//
// Usage:
// $myVar: split-str('string strang', ' ')
//----------------*/
@function split-str($string, $separator) {
  $index: str-index($string, $separator);
  $str-1: str-slice($string, 1, $index - 1);
  $str-2: str-slice($string, $index + 1);
  @return $str-1 $str-2;
}

//*---------------
// Creates a skeleton using the following arguments:
// - Skeleton items color.
// - Skeleton background color.
// - Array with 4 values for each element:
//      - Size (nth($i, 1)). Paired value with width/height.
//      - Position (nth($i, 2)). Paired value with top/left.
//      - Direction ($inverted). Boolean. If true, skeleton will be drawed from right to left. If false, it'll be from left to right.
//      - Skew ($hasSkew). Boolean. If true, skeleton item will have skew.
//
// Example:
// @include skeleton-builder(
//     $itemColor,
//     $backgroundColor,
//     'width height' 'top left' booleanPosition booleanSkew
// )
// @include skeleton-builder(
//     $secondary_color-200,
//     $secondary_color-0,
//     '32% 22px' '0 0px' false true,
//     '16% 22px' '100% 0px' true true,
//     '45% 22px' '0 32px' false true,
//     '45% 22px' '100% 32px' true true
// )
//----------------*/
@mixin skeleton-builder($itemColor, $backgroundColor, $linears...) {
  $bg-img: '';
  $bg-size: '';
  $bg-pos: '';
  $comma: '';
  $skew-width: '';

  @each $i in $linears {
      $splitList: split-str(nth($i, 1), ' ');
      $size-1: nth($splitList, 1);
      $size-2: nth($splitList, 2);

      $inverted: nth($i, 3);
      $hasSkew: nth($i, 4);

      @if $hasSkew {
          //As linear-gradient es 50%/50%, its width must be double-size for painting it with the % provided by the argument
          $skew-width: 'calc(('+ $size-1 + ' * 2) + ('+ $size-2 + '/ 2))';

          @if $inverted {
              $bg-img: $bg-img + $comma + 'linear-gradient(-60deg, ' + $itemColor + ' 50%, transparent 50%)';
          }

          @else {
              $bg-img: $bg-img + $comma + 'linear-gradient(-60deg, transparent 50%, ' + $itemColor + ' 50%)';
          }
      }

      @else {
          $skew-width: $size-1;

          $bg-img: $bg-img + $comma + 'linear-gradient('+ $itemColor + ' 100%, transparent 0)';
      }

      $bg-size: $bg-size+$comma+$skew-width+' '+$size-2;
      $bg-pos: $bg-pos+$comma+nth($i, 2);

      $comma: ', ';
  }

  background-image: #{$bg-img};
  background-color: #{$backgroundColor};
  background-size: #{$bg-size};
  background-position: #{$bg-pos};
}
