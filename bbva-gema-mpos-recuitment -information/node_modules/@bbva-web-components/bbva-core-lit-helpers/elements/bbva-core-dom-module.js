/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import '../utils/boot.js';

import { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';
import { strictTemplatePolicy } from '../utils/settings.js';

export const modules = {};
export const lcModules = {};
/**
 * Sets a bbva-core-dom-module into the global registry by id.
 *
 * @param {string} id bbva-core-dom-module id
 * @param {DomModule} module bbva-core-dom-module instance
 * @return {void}
 */
function setModule(id, module) {
  // store id separate from lowercased id so that
  // in all cases mixedCase id will stored distinctly
  // and lowercase version is a fallback
  modules[id] = module;
  lcModules[id.toLowerCase()] = module;
}
/**
 * Retrieves a bbva-core-dom-module from the global registry by id.
 *
 * @param {string} id bbva-core-dom-module id
 * @return {DomModule!} bbva-core-dom-module instance
 */
function findModule(id) {
  return modules[id] || lcModules[id.toLowerCase()];
}

/**
 * The `bbva-core-dom-module` element registers the dom it contains to the name given
 * by the module's id attribute. It provides a unified database of dom
 * accessible via its static `import` API.
 *
 * Example:
 *
 *     <bbva-core-dom-module id="foo">
 *       <img src="stuff.png">
 *     </bbva-core-dom-module>
 *
 * Then in code in some other location that cannot access the bbva-core-dom-module above
 *
 *     let img = customElements.get('bbva-core-dom-module').import('foo', 'img');
 *
 * @customElement bbva-core-dom-module
 * @polymer
 * @LitElement
 */
export class BbvaCoreDomModule extends HTMLElement {
  static get observedAttributes() {
    return ['id'];
  }

  /**
   * Retrieves the element specified by the css `selector` in the module
   * registered by `id`. For example, this.import('foo', 'img');
   * @param {string} id The id of the bbva-core-dom-module in which to search.
   * @param {string=} selector The css selector by which to find the element.
   * @return {Element} Returns the element which matches `selector` in the
   * module registered at the specified `id`.
   *
   * @export
   * @nocollapse Referred to indirectly in style-gather.js
   */
  static import(id, selector) {
    if (id) {
      const m = findModule(id);
      if (m && selector) {
        return m.querySelector(selector);
      }
      return m;
    }
    return null;
  }

  /**
   * @param {string} name Name of attribute.
   * @param {?string} old Old value of attribute.
   * @param {?string} value Current value of attribute.
   * @param {?string} namespace Attribute namespace.
   * @return {void}
   * @override
   */
  attributeChangedCallback(name, old, value) {
    if (old !== value) {
      this.register();
    }
  }

  /**
   * The absolute URL of the original location of this `bbva-core-dom-module`.
   *
   * This value will differ from this element's `ownerDocument` in the
   * following ways:
   * - Takes into account any `assetpath` attribute added during bundling
   *   to indicate the original location relative to the bundled location
   */
  get assetpath() {
    // Don't override existing assetpath.
    if (!this.__assetpath) {
      const owner = this.ownerDocument;
      const url = resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI);
      this.__assetpath = pathFromUrl(url);
    }
    return this.__assetpath;
  }

  /**
   * Registers the bbva-core-dom-module at a given id. This method should only be called
   * when a bbva-core-dom-module is imperatively created. For
   * example, `document.createElement('bbva-core-dom-module').register('foo')`.
   * @param {string=} id The id at which to register the bbva-core-dom-module.
   * @return {void}
   */
  register(moduleId) {
    const id = moduleId || this.id;
    if (id) {
      // Under strictTemplatePolicy, reject and null out any re-registered
      // bbva-core-dom-module since it is ambiguous whether first-in or last-in is trusted
      if (strictTemplatePolicy && findModule(id) !== undefined) {
        setModule(id, null);
        throw new Error(`strictTemplatePolicy: bbva-core-dom-module ${id} re-registered`);
      }
      this.id = id;
      setModule(id, this);
    }
  }
}

BbvaCoreDomModule.prototype.modules = modules;
BbvaCoreDomModule.prototype.modulesStyles = {};

if (!customElements.get('bbva-core-dom-module')) {
  customElements.define('bbva-core-dom-module', BbvaCoreDomModule);
}
