import { html, fixture, assert, fixtureCleanup } from '@open-wc/testing';

import '../bbva-amount.js';

suite('bbva-amount', () => {
  let el;
  let elShadowRoot;

  teardown(() => fixtureCleanup());

  setup(async () => {
    el = await fixture(
      html`
        <bbva-amount></bbva-amount>
      `,
    );
    elShadowRoot = el.shadowRoot;
    return el.updateComplete;
  });

  test('Using a wrong amount format sets "hasError" property to true', async () => {
    assert.isFalse(el.hasError, 'hasError is false by default');
    el.amount = 'any string';
    await el.updateComplete;
    assert.isTrue(el.hasError);
  });

  suite('negative', () => {
    test("toggle 'negative' attribute", async () => {
      el.amount = -117.24;
      await el.updateComplete;
      assert.isTrue(el.hasAttribute('negative'));
    });
  });

  suite('accessibility methods', () => {
    test('sets the appropriate accessible amount without abbreviation', async () => {
      const formattedAmount = '4.213.543,87 €';
      el.amount = 4213543.87;
      el.language = 'es';
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });

    test('sets the appropriate accessible amount aria-label', async () => {
      const formattedAmount = '4.213,54 M €';
      el.amount = 4213543.87;
      el.language = 'es';
      el.abbr = 3;
      el.abbreviations = {
        3: 'M',
        4: 'ten thousands',
      };
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });

    test('setting scale sets the adequate abbr', async () => {
      const formattedAmount = '4.213,54 M €';
      el.amount = 4213543.87;
      el.language = 'es';
      el.scale = 3;
      el.abbreviations = {
        3: 'M',
        4: 'ten thousands',
      };
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });

    test('getting scale returns current abbr', async () => {
      const formattedAmount = '4.213,54 M €';
      el.amount = 4213543.87;
      el.abbr = 3;
      await el.updateComplete;
      assert.equal(el.scale, el.abbr);
    });
  });

  suite('minus symbol position', () => {
    test('localCurrency in minusAfterSymbol shows minus-right', async () => {
      el.amount = -123;
      el.localCurrency = 'MXN';
      await el.updateComplete;
      assert.exists(elShadowRoot.querySelector('.minus-right'));
      assert.notExists(elShadowRoot.querySelector('.minus-left'));
    });

    test('localCurrency not in minusAfterSymbol shows minus-left', async () => {
      el.amount = -123;
      el.localCurrency = 'USD';
      await el.updateComplete;
      assert.notExists(elShadowRoot.querySelector('.minus-right'));
      assert.exists(elShadowRoot.querySelector('.minus-left'));
    });
  });

  suite('Fractional', () => {
    test('fractional part gets completed with 0 if necessary', async () => {
      const formattedAmount = '12.345,60 €';
      el.language = 'es';
      el.amount = 12345.6;
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });
  });

  suite('Currency', () => {
    test('currency in right aligned list gets aligned to the right', async () => {
      el.currencyCode = 'EUR';
      el.amount = 12345.6;
      await el.updateComplete;
      assert.exists(elShadowRoot.querySelector('.currency-right'));
      assert.notExists(elShadowRoot.querySelector('.currency-left'));
    });
    test('currency not in right aligned list gets aligned to the left', async () => {
      el.currencyCode = 'USD';
      el.amount = 12345.6;
      await el.updateComplete;
      assert.notExists(elShadowRoot.querySelector('.currency-right'));
      assert.exists(elShadowRoot.querySelector('.currency-left'));
    });
    test('showCurrencyCode hides currency symbol and shows currency code', async () => {
      el.currencyCode = 'USD';
      el.showCurrencyCode = true;
      el.amount = 12345.6;
      await el.updateComplete;
      assert.notExists(elShadowRoot.querySelector('.currency-right'));
      assert.notExists(elShadowRoot.querySelector('.currency-left'));
      assert.equal(elShadowRoot.querySelector('.currency-code').textContent.trim(), 'USD');
    });
  });

  suite('Decimals hidden', () => {
    test('setting "decimals-hidden" to true hides decimal part regardless of its value', async () => {
      el.amount = 123434.23;
      el.decimalsHidden = true;
      await el.updateComplete;
      assert.notExists(elShadowRoot.querySelector('.fractional'));
      assert.notExists(elShadowRoot.querySelector('.separator'));
    });

    test('setting "zero-decimals-hidden" does not hide decimal part if is not zero', async () => {
      el.amount = 123434.23;
      el.zeroDecimalsHidden = true;
      await el.updateComplete;
      assert.exists(elShadowRoot.querySelector('.fractional'));
      assert.exists(elShadowRoot.querySelector('.separator'));
    });

    test('setting "zero-decimals-hidden" hides decimal part if is zero', async () => {
      el.amount = 123434;
      el.zeroDecimalsHidden = true;
      await el.updateComplete;
      assert.notExists(elShadowRoot.querySelector('.fractional'));
      assert.notExists(elShadowRoot.querySelector('.separator'));
    });

    test('setting "trailing-zero-decimals-hidden" removes traling zeros in fractional part', async () => {
      el.trailingZeroDecimalsHidden = true;
      el.amount = 1234.8;
      await el.updateComplete;
      assert.equal(el.amount, 1234.8);
    });

    test('setting "trailing-zero-decimals-hidden" preserves a fractional with the number of digits set in "quantityFractional"', async () => {
      el.trailingZeroDecimalsHidden = true;
      el.amount = 1234.81234;
      await el.updateComplete;
      assert.equal(elShadowRoot.querySelector('.fractional').textContent, '81');
    });

    test('currencies in decimals hidden list do not show decimals', async () => {
      el.amount = 123434.678;
      el.currencyCode = 'PYG';
      await el.updateComplete;
      assert.notExists(elShadowRoot.querySelector('.fractional'));
      assert.notExists(elShadowRoot.querySelector('.separator'));
    });
  });

  suite('Round', () => {
    test('round 3 decimals to 2 with overflow in integer part (0)', async () => {
      const formattedAmount = '1,00 €';
      el.language = 'es';
      el.amount = 0.999;
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });

    test('round 3 decimals to 0 with overflow  in integer part', async () => {
      const formattedAmount = '1 €';
      el.language = 'es';
      el.amount = 0.999;
      el.decimalDigits = 0;
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });

    test('round 3 decimals to 2 with overflow in integer part != 0 ', async () => {
      const formattedAmount = '3,00 €';
      el.language = 'es';
      el.amount = 2.997;
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });

    test('round 3 decimals to 2 without overflow in integer part ', async () => {
      const formattedAmount = '3,99 €';
      el.language = 'es';
      el.amount = 3.991;
      await el.updateComplete;
      const srAmount = elShadowRoot.querySelector('.sr-only').textContent;
      assert.equal(srAmount, formattedAmount);
    });
  });

  test('a11y', () => assert.isAccessible(el));

  suite('Semantic Dom', () => {
    test('DOM - Structure test', () => {
      assert.dom.equalSnapshot(el);
    });

    test('SHADOW DOM - Structure test', () => {
      assert.shadowDom.equalSnapshot(el);
    });

    test('LIGHT DOM - Structure test', () => {
      assert.lightDom.equalSnapshot(el);
    });
  });
});
