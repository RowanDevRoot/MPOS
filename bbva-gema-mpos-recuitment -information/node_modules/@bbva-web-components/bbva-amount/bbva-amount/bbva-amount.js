import { LitElement, html } from 'lit-element';
import { getComponentSharedStyles } from '@cells-components/cells-lit-helpers';
import { CellsAmountMixin as cellsAmountMixin } from '@cells-components/cells-amount-mixin';
import * as amountUtils from '@cells-components/cells-amount-mixin/utils/amount-utilities.js';
import styles from './bbva-amount-styles.js';
/**
`<bbva-amount>` is a component formatting an amount and its currency code into different combinations of sizes.

If amount is a negative value, `negative` attribute is added, which can be used to provide a visual clue.

Amount can be abbreviated if a scale is indicated. E.g.: 1.240.000 can be abbreviated as 1.24M if scale 6 is set and matches an abbreviation in abbreviations property.

Example:

```html
<bbva-amount amount="6423525.45" currency-code="EUR" local-currency="USD" language="en">
</bbva-amount>
```

 ## Styling

The following custom properties are available for styling:

### Custom properties

| Selector                         | CSS Property | CSS Variable                           | Theme Variable                  | Foundations/Fallback                                      |
| -------------------------------- | ------------ | -------------------------------------- | ------------------------------- | --------------------------------------------------------- |
| :host([variant='5xl']) .currency | font-size    | --bbva-amount-5xl-currency-font-size   |                                 | 1.75rem                                                   |
| :host([variant='5xl']) .currency | line-height  | --bbva-amount-5xl-currency-line-height |                                 | 2rem                                                      |
| :host([variant='5xl'])           | font-size    | --bbva-amount-5xl-font-size            |                                 | 3rem                                                      |
| :host([variant='5xl'])           | line-height  | --bbva-amount-5xl-line-height          |                                 | 3rem                                                      |
| :host([variant='4xl']) .currency | font-size    | --bbva-amount-4xl-currency-font-size   | --typographyTypeXLarge          | foundations.typography.typeXLarge           |
| :host([variant='4xl']) .currency | line-height  | --bbva-amount-4xl-currency-line-height | --lineHeightTypeXLarge          | foundations.lineHeight.typeXLarge           |
| :host([variant='4xl'])           | font-size    | --bbva-amount-4xl-font-size            |                                 | 2rem                                                      |
| :host([variant='4xl'])           | line-height  | --bbva-amount-4xl-line-height          |                                 | 2rem                                                      |
| :host([variant='3xl']) .currency | font-size    | --bbva-amount-3xl-currency-font-size   | --typographyType3XSmall         | foundations.typography.type3XSmall          |
| :host([variant='3xl']) .currency | line-height  | --bbva-amount-3xl-currency-line-height | --lineHeightType3XSmall         | foundations.lineHeight.type3XSmall          |
| :host([variant='3xl'])           | font-size    | --bbva-amount-3xl-font-size            | --typographyType3XLarge         | foundations.typography.type3XLarge          |
| :host([variant='3xl'])           | line-height  | --bbva-amount-3xl-line-height          | --lineHeightType3XLarge         | foundations.lineHeight.type3XLarge          |
| :host([variant='xl']) .currency  | font-size    | --bbva-amount-xl-currency-font-size    | --typographyType3XSmall         | foundations.typography.type3XSmall          |
| :host([variant='xl']) .currency  | line-height  | --bbva-amount-xl-currency-line-height  | --lineHeightType3XSmall         | foundations.lineHeight.type3XSmall          |
| :host([variant='xl'])            | font-size    | --bbva-amount-xl-font-size             | --typographyTypeXLarge          | foundations.typography.typeXLarge           |
| :host([variant='xl'])            | line-height  | --bbva-amount-xl-line-height           | --lineHeightTypeXLarge          | foundations.lineHeight.typeXLarge           |
| :host([variant='l']) .currency   | font-size    | --bbva-amount-l-currency-font-size     | --typographyType3XSmall         | foundations.typography.type3XSmall          |
| :host([variant='l']) .currency   | line-height  | --bbva-amount-l-currency-line-height   | --lineHeightType3XSmall         | foundations.lineHeight.type3XSmall          |
| :host([variant='l'])             | font-size    | --bbva-amount-l-font-size              | --typographyTypeLarge           | foundations.typography.typeLarge            |
| :host([variant='l'])             | line-height  | --bbva-amount-l-line-height            | --lineHeightTypeLarge           | foundations.lineHeight.typeLarge            |
| .currency                        | float        | --bbva-amount-currency-float           |                                 | none                                                      |
| .minus-right                     | float        | --bbva-amount-minus-right-float        |                                 | none                                                      |
| .minus-left                      | float        | --bbva-amount-minus-left-float         |                                 | none                                                      |
| :host                            | font-weight  | --bbva-amount-font-weight              | --fontFacePrimaryBookFontWeight | foundations.fontFacePrimary.book.fontWeight |
> Styling documentation generated by Cells CLI

@customElement bbva-amount
@polymer
@LitElement
@demo demo/index.html
@appliesMixin CellsAmountMixin
*/
export class BbvaAmount extends cellsAmountMixin(LitElement) {
  static get is() {
    return 'bbva-amount';
  }

  static get properties() {
    return {
      /**
       * Abbr used to display the given amount.
       * Allowed values are 1, 2, 3, 6 and 9.
       * Values got from (http://www.statman.info/conversions/number_scales.html)
       * Note: 9 is abbreviated as 'B' (Billions) instead of 'G'.
       */
      abbr: {
        type: Number,
      },

      /**
       * Chars used as abbreviature depending on the applied scale. Values got from (http://www.statman.info/conversions/number_scales.html)
       */
      abbreviations: {
        type: Object,
      },

      /**
       * Number of decimals
       */
      decimalDigits: {
        type: Number,
        attribute: 'decimal-digits',
      },

      /**
       * If true, decimal part of the amount will be hidden regardless of its value.
       */
      decimalsHidden: {
        type: Boolean,
        attribute: 'decimals-hidden',
      },

      /**
       * If true, decimal part of the amount will be hidden if is zero.
       */
      zeroDecimalsHidden: {
        type: Boolean,
        attribute: 'zero-decimals-hidden',
      },

      /**
       * If true, decimal part of the amount will be hidden if there is a trailing zero.
       */
      trailingZeroDecimalsHidden: {
        type: Boolean,
        attribute: 'trailing-zero-decimals-hidden',
      },

      /**
       * If true, amount will show currency code instead of currency symbol
       */
      showCurrencyCode: {
        type: Boolean,
        attribute: 'show-currency-code',
      },
    };
  }

  constructor() {
    super();
    this.decimalDigits = 2;
    this.language = document.documentElement.lang || 'en';
    this.decimalsHidden = false;
    this.zeroDecimalsHidden = false;
    this.trailingZeroDecimalsHidden = false;
    this.hasError = false;
    this.abbreviations = {
      1: 'da',
      2: 'h',
      3: 'k',
      6: 'M', // Million
      9: 'B', // Normalized is actually 'G', but this is more understandable
    };
  }

  updated(changedProps) {
    if (changedProps.has('amount')) {
      this._computeHasError(this.amount);
      this._toggleBooleanAttribute('negative', this.negative);
    }
  }

  _computeHasError() {
    const oldError = this.hasError;
    const newError = !this._isValidAmount;
    if (oldError !== newError) {
      this.hasError = newError;
      this._toggleBooleanAttribute('has-error', newError);
      this.dispatchEvent(
        new CustomEvent('amount-has-error-change', {
          detail: newError,
          bubbles: true,
          composed: true,
        }),
      );
    }
  }

  _toggleBooleanAttribute(attr, condition) {
    if (condition) {
      this.setAttribute(attr, '');
    } else {
      this.removeAttribute(attr);
    }
  }

  /**
   * Alias for abbr property
   * @return {Number} Abbreviation value
   */
  get scale() {
    return this.abbr;
  }

  /**
   * Sets new abbreviation value
   * @param  {Number} value New abbreviation value
   */
  set scale(value) {
    this.abbr = value;
  }

  get _isValidAmount() {
    return typeof this.amount === 'number' && Number.isFinite(this.amount);
  }

  /**
   * Returns error state of amount
   * @return {Boolean} Error state
   */
  get hasError() {
    return this._hasError;
  }

  /**
   * Sets error state of amount
   * @param  {Boolean} hasError New error state
   */
  set hasError(hasError) {
    this._hasError = Boolean(hasError);
  }

  /**
   * Return amount to absolute counting with abbreviation
   * @return {Number} Absolute abbreviated amount
   */
  get absAbbrAmount() {
    let formattedAmount = amountUtils.getAbsAmount(this.amount);
    if (this.abbr) {
      formattedAmount /= 10 ** this._safeAbbrValue;
    }
    return formattedAmount;
  }

  get _fraccionalOverFlow() {
    return parseInt(
      amountUtils.getFractionalAmount(this.absAbbrAmount).toFixed(this.decimalDigits),
      10,
    );
  }

  get _integer() {
    const fraccionalOverFlow = this._fraccionalOverFlow;
    return amountUtils.getGroupedIntegerAbsString(
      this.absAbbrAmount + fraccionalOverFlow,
      this._groupChar,
    );
  }

  get _groupChar() {
    return amountUtils.getGroupChars(this.language);
  }

  get _separator() {
    return amountUtils.getSeparator(this.language);
  }

  get _fractional() {
    let fractional =
      parseFloat(amountUtils.getFractionalAmount(this.absAbbrAmount).toFixed(this.decimalDigits))
        .toString()
        .split('.')[1] || '';
    if (this.trailingZeroDecimalsHidden) {
      return fractional;
    }
    if (fractional.length < this.decimalDigits) {
      fractional = `${fractional}${new Array(this.decimalDigits + 1).join('0')}`;
    }
    return fractional.slice(0, this.decimalDigits);
  }

  get _currency() {
    return amountUtils.getCurrencyAsSymbol(this.localCurrency, this.currencyCode);
  }

  get _alignRight() {
    return amountUtils.isRightAligned(this.currencyCode);
  }

  get _minusAfterSymbol() {
    return amountUtils.hasMinusAfterSymbol(this.localCurrency);
  }

  get _decimalsHidden() {
    if (this.decimalsHidden) {
      return true;
    }
    if (!amountUtils.hasDecimalPart(this.currencyCode)) {
      return true;
    }
    if (this.zeroDecimalsHidden) {
      return !Number(this._fractional);
    }
    return false;
  }

  get _abbreviation() {
    const abbreviation = this.abbreviations[this._safeAbbrValue];
    return this._safeAbbrValue !== 0 && !!abbreviation ? abbreviation : '';
  }

  get _safeAbbrValue() {
    // Convert into an integer if it isn't
    return this.abbr % 1 !== 0 ? 0 : this.abbr;
  }

  /**
   * Accessible amount
   * @return {String} Accessible amount string
   */
  get srAmount() {
    let strAmount = '';
    if (this.negative && !this._minusAfterSymbol) {
      strAmount = '-';
    }
    if (this._currency && !this._alignRight && !this.showCurrencyCode) {
      strAmount += this._currency;
    }
    if (this.negative && this._minusAfterSymbol) {
      strAmount += '-';
    }
    if (this._isValidAmount) {
      strAmount += this._integer;
    }
    if (!this._decimalsHidden && this._fractional) {
      strAmount = strAmount + this._separator + this._fractional;
    }
    if (this._safeAbbrValue) {
      strAmount = `${strAmount} ${this._abbreviation}`;
    }
    if (this._currency && this._alignRight && !this.showCurrencyCode) {
      strAmount = `${strAmount} ${this._currency}`;
    }
    if (this.showCurrencyCode) {
      strAmount = `${strAmount} ${this.currencyCode}`;
    }
    return strAmount;
  }

  static get styles() {
    return [styles, getComponentSharedStyles('bbva-amount-shared-styles')];
  }

  render() {
    return html`
      <span class="sr-only">${this.srAmount}</span>
      <span class="amount-wrapper" aria-hidden="true">
        ${this.negative && !this._minusAfterSymbol
          ? html`
              <span class="minus minus-left">-</span>
            `
          : ''}
        ${this._currency && !this._alignRight && !this.showCurrencyCode
          ? html`
              <span class="currency currency-left">${this._currency}</span>
            `
          : ''}
        ${this.negative && this._minusAfterSymbol
          ? html`
              <span class="minus minus-right">-</span>
            `
          : ''}
        ${this._isValidAmount
          ? html`
              <span class="amount-block">
                <span class="integer">${this._integer}</span>
                ${!this._decimalsHidden && this._fractional
                  ? html`
                      <span class="separator">${this._separator}</span>
                      <span class="fractional">${this._fractional}</span>
                    `
                  : ''}
                ${this._safeAbbrValue
                  ? html`
                      <span class="abbreviation">&nbsp;${this._abbreviation}</span>
                    `
                  : ''}
              </span>
            `
          : ''}
        ${this._currency && this._alignRight && !this.showCurrencyCode
          ? html`
              <span class="currency currency-right">${this._currency}</span>
            `
          : ''}
        ${this.showCurrencyCode
          ? html`
              <span class="currency-code">&nbsp;${this.currencyCode}</span>
            `
          : ''}
      </span>
    `;
  }
}

customElements.define(BbvaAmount.is, BbvaAmount);
