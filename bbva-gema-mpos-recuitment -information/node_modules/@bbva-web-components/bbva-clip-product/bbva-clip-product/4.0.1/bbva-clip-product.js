import { LitElement, html } from 'lit-element';
import { classMap } from 'lit-html/directives/class-map.js';
import { getComponentSharedStyles } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import '@bbva-web-components/bbva-clip-box';
import * as defaultMi from './bbva-clip-product-svg.js';
import styles from './bbva-clip-product-styles.js';
/**

A product clip is an element with a microillustration to represent an account, card or device within an application.

This component has two variants: 'minimum' (default, no variant) and 'maximum'. It can show one SVG or clip box from a predefined set, or two SVGs/one SVG and a clip box (only in the left position) in the 'maximum' variant. Text content of the tag will be used as accessible text for screen readers. User can show a custom SVG instead of the predefined ones including it in the 'item' or 'item-right' slots.

Available SVGs are 'card', 'phone', 'account' and 'receipt'.

Maximum

The elements that make up the clip product maximum can be exchanged for the represented assets (Clip Box Initials, Illustration Account, Illustration Card, Illustration Receipt).

Minimum

It would have size 'large' (only for card & phone items) and 'xl' (default)

The elements that make up the clip product minimum can be exchanged for the assets (Clip Box Initials, Clip Box Image, Illustration Account, Illustration Card, Illustration Receipt or Phone o) represented, they must respect the combinations

Examples:

Minimum with large size

```html
<bbva-clip-product item="card" size="large">Card</bbva-clip-product>
<bbva-clip-product item="phone" size="large">Phone</bbva-clip-product>
```

Minimum with clip box

```html
<bbva-clip-product user-image="images/avatar.png">Card of Jose Luis</bbva-clip-product>
<bbva-clip-product user-text="Jose Luis">Card of Jose Luis</bbva-clip-product>>
```

Minimum default

```html
<bbva-clip-product item="card">Card</bbva-clip-product>
```

Maximum

```html
<bbva-clip-product variant="receipt" item="account">Account</bbva-clip-product>
<bbva-clip-product variant="receipt" item="receipt">Receipt</bbva-clip-product>
<bbva-clip-product variant="maximum" item-right="account" user-text="Jose Luis"> Account of Jose Luis</bbva-clip-product>
<bbva-clip-product variant="maximum" item-right="card" user-image="images/avatar.png"
> Card of Jose Luis</bbva-clip-product>
 <bbva-clip-product
  variant="maximum"
  user-image="images/avatar.png"
  user-image-right="images/avatar.png"
>Clip</bbva-clip-product>
```

## Styling

The following custom properties are available for styling:

### Custom properties

| Selector                       | CSS Property          | CSS Variable                           | Theme Variable       | Foundations/Fallback                          |
| ------------------------------ | --------------------- | -------------------------------------- | -------------------- | --------------------------------------------- |
| :host([variant='maximum']) .bg | background-image      | --_secondary-bg-color                  |                      |                                               |
| .bg                            | background-color      | --_bg-color                            |                      |                                               |
| :host                          | --_bg-color           | --bbva-clip-product-bg-color           | --colorsSecondary100 | foundations.colors.secondary100 |
| :host                          | --_secondary-bg-color | --bbva-clip-product-secondary-bg-color | --colorsSecondary200 | foundations.colors.secondary200 |
> Styling documentation generated by Cells CLI

@customElement bbva-clip-product
@polymer
@LitElement
@demo demo/index.html
*/
export class BbvaClipProduct extends LitElement {
  static get is() {
    return 'bbva-clip-product';
  }

  static get properties() {
    return {
      /**
       * SVG item to show. Available items are 'card', 'phone', 'account', 'receipt' or a clip box element with initials or image
       */
      item: {
        type: String,
      },

      /**
       * SVG item to show in right position for 'maximum' variant. Available items are 'card', 'account' and 'receipt' or a clip box element with initials
       */
      itemRight: {
        type: String,
        attribute: 'item-right',
      },

      /**
       * User name for clip box in 'minimum' variant
       */
      userText: {
        type: String,
        attribute: 'user-text',
      },

      /**
       * User name for clip box in 'maximum' variant
       */
      userTextRight: {
        type: String,
        attribute: 'user-text-right',
      },

      /**
       * User image for clip box in 'minimum' variant
       */
      userImage: {
        type: String,
        attribute: 'user-image',
      },

      /**
       * User image for clip box in 'maximum' variant
       */
      userImageRight: {
        type: String,
        attribute: 'user-image-right',
      },

      /**
       * Illustration size in 'minimum' variant
       */

      size: {
        type: String,
      },

      /**
       * Variant of clip product. Available variants are 'minimum'(Default) and 'maximum'
       */
      variant: {
        type: String,
      },
    };
  }

  static get styles() {
    return [styles, getComponentSharedStyles('bbva-clip-product-shared-styles')];
  }

  get _minimumDrawable() {
    return (
      !this.variant ||
      (this.variant && this.variant.toLowerCase() === 'maximum' && this.item !== 'phone')
    );
  }

  get _maximumDrawable() {
    return (
      this._minimumDrawable &&
      this.variant &&
      this.variant.toLowerCase() === 'maximum' &&
      this.itemRight !== 'phone'
    );
  }

  get _largeSize() {
    return (
      this.size === 'large' &&
      this.variant !== 'maximum' &&
      (this.item === 'card' || this.item === 'phone')
    );
  }

  static showAvatar(item, userText, userImage) {
    return userText || userImage
      ? html`
          <div class="avatar">
            <bbva-clip-box
              size="large"
              class="bitone"
              .text="${userText}"
              .image="${userImage}"
            ></bbva-clip-box>
          </div>
        `
      : html`
          <div class="item">
            ${defaultMi[item]}
          </div>
        `;
  }

  render() {
    return html`
      <span class="sr-only">
        <slot></slot>
      </span>
      <div
        class="${classMap({
          large: this._largeSize,
        })} bg"
        aria-hidden="true"
      >
        ${this._minimumDrawable
          ? html`
              ${BbvaClipProduct.showAvatar(this.item, this.userText, this.userImage, this.size)}
            `
          : ''}
        ${this._maximumDrawable
          ? html`
              ${BbvaClipProduct.showAvatar(this.itemRight, this.userTextRight, this.userImageRight)}
            `
          : ''}
      </div>
    `;
  }
}

customElements.define(BbvaClipProduct.is, BbvaClipProduct);
