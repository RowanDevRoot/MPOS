import { LitElement, html } from 'lit-element';
import { getComponentSharedStyles } from '@cells-components/cells-lit-helpers';
import { CellsI18nMixin as cellsI18nMixin } from '@cells-components/cells-i18n-mixin';
import { classMap } from 'lit-html/directives/class-map.js';
import { ifDefined } from 'lit-html/directives/if-defined.js';
import * as foundations from '@bbva-web-components/bbva-foundations-styles';
import '@cells-components/cells-icon';
import styles from './bbva-clip-box-styles.js';

// const randomColors = ['blue', 'aqua', 'sand', 'purple'];
const randomColors = {
  blue: foundations.colors.primaryMediumLight,
  sand: foundations.colors.tertiaryType4Medium,
  purple: foundations.colors.tertiaryType8Medium,
  aqua: foundations.colors.primaryVariantDark,
};

const hashCode = s => s.split('').reduce((a, b) => a + b.charCodeAt(0), 0);

/**
A circular resource component used for initial clips, photos, or icons.

Example:
Initials

Custom size & random background

```html
<bbva-clip-box class="bitone" text="kjagj" size="small"> </bbva-clip-box>
```

Custom size & custom background

```html
<bbva-clip-box class="bitone" text="bbva" size="xxl" bg-color="#F78BE8" bg-color2="#6500a4" custom>
</bbva-clip-box>
```

Icon

```html
<bbva-clip-box
  bg-color="#F78BE8"
  icon-color="#6500a4"
  class="bitone"
  size="large"
  icon="coronita:myprofile"
></bbva-clip-box>
```

Image

```html
<bbva-clip-box size="small" image="images/bbva.png"> </bbva-clip-box>
```

Solid background

```html
<bbva-clip-box bg-color="#6500a4" size="large" icon="coronita:myprofile"></bbva-clip-box>
```

## Random Colors

In the case of the initials, the color of the background should be assigned to the wording of the colors that pass accessibility, and if it is a contact in the agenda, the same color should always be kept for that person.
These are the 5 colors available:
  * foundations.colors.primaryMediumLight  -> blue
  * foundations.colors.tertiaryType4Medium  -> sand
  * foundations.colors.tertiaryType8Medium  -> purple
  * foundations.colors.primaryVariantDark  -> aqua

## Icons

Since this component uses icons, it will need an [iconset](https://platform.bbva.com/en-us/developers/engines/cells/documentation/cells-architecture/composing-with-components/cells-icons) in your project as an application level dependency. In fact, this component uses an iconset in its demo.

## Styling

The following custom properties are available for styling:

### Custom properties

| Selector                                   | CSS Property              | CSS Variable                  | Theme Variable                  | Foundations/Fallback                                      |
| ------------------------------------------ | ------------------------- | ----------------------------- | ------------------------------- | --------------------------------------------------------- |
| :host([size='xxl']) .icon                  | --cells-icon-size         | --bbva-clip-box-xxl-icon-size |                                 | 2rem                                                      |
| :host([size='xxl']) .initials              | --bbva-clip-box-font-size |                               | --typographyType3XLarge         | foundations.typography.type3XLarge          |
| :host([size='extralarge']) .icon           | --cells-icon-size         | --bbva-clip-box-xl-icon-size  |                                 | 2rem                                                      |
| :host([size='extralarge']) .initials       | --bbva-clip-box-font-size |                               | --typographyType2XLarge         | foundations.typography.type2XLarge          |
| :host([size='large']) .icon                | --cells-icon-size         | --bbva-clip-box-l-icon-size   |                                 | 1.5rem                                                    |
| :host([size='large']) .initials            | --bbva-clip-box-font-size |                               | --typographyTypeLarge           | foundations.typography.typeLarge            |
| :host([size='medium']) .icon               | --cells-icon-size         | --bbva-clip-box-m-icon-size   |                                 | 1.5rem                                                    |
| :host([size='medium']) .initials           | --bbva-clip-box-font-size |                               | --typographyTypeMedium          | foundations.typography.typeMedium           |
| :host([size='small']) .icon                | --cells-icon-size         | --bbva-clip-box-s-icon-size   |                                 | 1rem                                                      |
| .initials                                  | font-size                 | --bbva-clip-box-font-size     | --typographyType3XSmall         | foundations.typography.type3XSmall          |
| :host(.bitone:not([custom])) .bitone-layer | background                | --bbva-clip-box-bg-color      | --colorsPrimaryMediumLight      | foundations.colors.primaryMediumLight       |
| :host(.bitone[custom]) .bitone-layer       | background                | --bbva-clip-box-bg-color2     | --colorsPrimaryMediumLight      | foundations.colors.primaryMediumLight       |
| :host                                      | background                | --bbva-clip-box-bg-color      | --colorsPrimaryMediumLight      | foundations.colors.primaryMediumLight       |
| :host                                      | font-size                 | --bbva-clip-box-size          |                                 | 3rem                                                      |
| :host                                      | font-weight               | --bbva-clip-box-font-weight   | --fontFacePrimaryBookFontWeight | foundations.fontFacePrimary.book.fontWeight |
| :host                                      | color                     | --bbva-clip-box-text-color    | --colorsPrimaryCoreLightened    | foundations.colors.primaryCoreLightened     |
> Styling documentation generated by Cells CLI

@customElement bbva-clip-box
@polymer
@LitElement
@demo demo/index.html
@appliesMixin CellsI18nMixin
*/
class BbvaClipBox extends cellsI18nMixin(LitElement) {
  static get is() {
    return 'bbva-clip-box';
  }

  static get properties() {
    return {
      /**
       * Custom left background color
       * @default foundations.colors.primaryMediumLight
       */
      bgColor: {
        type: String,
        attribute: 'bg-color',
      },
      /**
       * Background secondary (right) color
       * @default foundations.colors.primaryMediumLight
       */
      bgColor2: {
        type: String,
        attribute: 'bg-color2',
      },
      /**
       * Accessibility Text
       */
      accessibilityText: {
        type: String,
        attribute: 'accessibility-text',
      },
      /**
       * Icon showed
       */
      icon: {
        type: String,
      },
      /**
       * color icon showed (default = white)
       */
      iconColor: {
        type: String,
        attribute: 'icon-color',
      },
      /**
       * Text
       */
      text: {
        type: String,
      },
      /**
       * Size
       * @default small
       */
      size: {
        type: String,
        reflect: true,
      },
      /**
       * Image source
       */
      image: {
        type: String,
      },
      /**
       * Custom background color for initials
       */
      custom: {
        type: Boolean,
      },
      /**
       * Number of initials showed in text case
       * @default 2
       */
      maxSizeInitials: {
        type: Number,
        attribute: 'max-size-initials',
      },
      /**
       * Number of initials showed in custom text case
       * @default 3
       */
      customMaxSizeInitials: {
        type: Number,
        attribute: 'custom-max-size-initials',
      },
    };
  }

  constructor() {
    super();
    this.bgColor = '';
    this.bgColor2 = '';
    this.accessibilityText = '';
    this.icon = '';
    this.iconColor = '';
    this.text = '';
    this.image = '';
    this.custom = false;
    this.size = 'small';
    this.maxSizeInitials = 2;
    this.customMaxSizeInitials = 3;
  }

  static get styles() {
    return [styles, getComponentSharedStyles('bbva-clip-box-shared-styles')];
  }

  updated(changedProps) {
    if (
      changedProps.has('custom') ||
      changedProps.has('bgColor') ||
      changedProps.has('text') ||
      changedProps.has('bgColor2') ||
      changedProps.has('iconColor')
    ) {
      this._updateBgColor(this._initialsTransform, this.bgColor, this.bgColor2);
    }
  }

  static isDefaultColor(color) {
    const colors = Object.keys(randomColors);
    return colors.includes(color);
  }

  _updateBgColor(initialsFormat) {
    if (!this._hasIconImage && this.bgColor === '') {
      // Only with initials

      if (initialsFormat && !this.custom) {
        // Random default color
        const colors = Object.keys(randomColors);
        const index = hashCode(initialsFormat) % colors.length;
        this._setBgColor(randomColors[colors[index]]);
      }
    }
    if (!this.text && this.icon && this.iconColor) {
      this._setIconColor(this.iconColor);
    }

    if (this.bgColor !== '') {
      // bgColor setted
      if (BbvaClipBox.isDefaultColor(this.bgColor)) {
        this._setBgColor(randomColors[this.bgColor]);
      } else {
        this._setBgColor(this.bgColor);
      }
    }

    if (this.custom && this.bgColor2 !== '') {
      // bgColor & bgColor2 customized
      if (BbvaClipBox.isDefaultColor(this.bgColor2)) {
        this._setBgColor(randomColors[this.bgColor2]);
      } else {
        this._setBgColor2(this.bgColor2);
      }
    }
  }

  get _hasIconImage() {
    return this.icon || this.image;
  }

  get _computedIsAriaHidden() {
    return String(Boolean(this.image && this.accessibilityText));
  }

  get _initialsTransform() {
    if (this.text) {
      if (this.custom) {
        this.maxSizeInitials = this.customMaxSizeInitials;
      }
      return this.text.substr(0, this.maxSizeInitials).toUpperCase();
    }
    return '';
  }

  get _computedRole() {
    return this.image ? 'image' : undefined;
  }

  _setBgColor(color) {
    this.style.setProperty('--bbva-clip-box-bg-color', color);
  }

  _setBgColor2(color2) {
    this.style.setProperty('--bbva-clip-box-bg-color2', color2);
  }

  _setIconColor(color) {
    this.style.color = color;
  }

  render() {
    return html`
      <div id="content">
        <div class="bitone-layer"></div>
        ${this.text || !this._hasIconImage
          ? html`
              <p class="initials" id="initials" aria-label="${this.t(this.text)}">
                ${this._initialsTransform}
              </p>
            `
          : ''}
        <cells-icon
          aria-hidden="${this._computedIsAriaHidden ? 'true' : 'false'}"
          aria-label="${this.t(this.accessibilityText)}"
          class="${classMap({ image: this.image, icon: this.icon })}"
          id="icon"
          .icon="${this.icon}"
          .src="${this.image}"
          role="${ifDefined(this._computedRole)}"
          ?hidden="${!this._hasIconImage}"
        >
        </cells-icon>
      </div>
    `;
  }
}

customElements.define(BbvaClipBox.is, BbvaClipBox);
