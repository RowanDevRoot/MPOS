import { LitElement, html, css, } from 'lit-element';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import '@cells-components/cells-selector/cells-selector.js';
import * as Gestures from '@cells-components/cells-lit-helpers/utils/gestures.js';
import styles from './cells-demo-resizable-viewport-styles.js';
/**
`<cells-demo-resizable-viewport>` allows you to showcase other components at different viewport sizes (breakpoints) in a similar manner that the Google Chrome Inspector does in the device toolbar.

__Example:__

```html
<cells-demo-resizable-viewport
  breakpoints='{
    "mobile": { "width": 360, "height": 640, "name": "Mobile" },
    "tablet": { "width": 768, "height": 1024, "name": "Tablet" }}'
  selected-key="tablet">
</cells-demo-resizable-viewport>
```

## Styling

The following custom properties and mixins are available for styling:

### Custom Properties
| Custom Property                                        | Selector                                        | CSS Property | Value                                                    |
| ------------------------------------------------------ | ----------------------------------------------- | ------------ | -------------------------------------------------------- |
| --cells-demo-resizable-viewport-background-color       | .bp__bar                                        | border       | `No fallback value`                                      |
| --cells-demo-resizable-viewport-dragger-inactive-color | .bp__bar .dragger-path                          | fill         |  ![#fff](https://placehold.it/15/fff/000000?text=+) #fff |
| --cells-demo-resizable-viewport-dragger-color          | .bp__bar.iron-selected ~ .bp__bar .dragger-path | fill         | `No fallback value`                                      |
| --cells-demo-resizable-viewport-dragger-color          | .bp__bar.iron-selected .dragger-path            | fill         | `No fallback value`                                      |
| --cells-demo-resizable-viewport-dragger-color          | .bp__bar:hover ~ .bp__bar .dragger-path         | fill         | `No fallback value`                                      |
| --cells-demo-resizable-viewport-dragger-color          | .bp__bar:hover .dragger-path                    | fill         | `No fallback value`                                      |
### @apply
| Mixins                                                      | Selector                                | Value |
| ----------------------------------------------------------- | --------------------------------------- | ----- |
| --cells-demo-resizable-viewport-bar-wrapper                 | .bp                                     | {}    |
| --cells-demo-resizable-viewport-bar                         | .bp__bar                                | {}    |
| --cells-demo-resizable-viewport-dragger                     | .bp__bar .dragger                       | {}    |
| --cells-demo-resizable-viewport-bar-selected                | .bp__bar.iron-selected                  | {}    |
| --cells-demo-resizable-viewport-bar-selected-siblings       | .bp__bar.iron-selected ~ .bp__bar       | {}    |
| --cells-demo-resizable-viewport-bar-selected-siblings-hover | .bp__bar.iron-selected ~ .bp__bar:hover | {}    |
| --cells-demo-resizable-viewport-bar-hover                   | .bp__bar:hover                          | {}    |
| --cells-demo-resizable-viewport-bar-hover-siblings          | .bp__bar:hover ~ .bp__bar               | {}    |
| --cells-demo-resizable-viewport-bar-hover-label             | .bp__bar:hover .bp__label               | {}    |
| --cells-demo-resizable-viewport-bar-hover-label-siblings    | .bp__bar:hover ~ .bp__bar .bp__label    | {}    |
| --cells-demo-resizable-viewport-bar-label                   | .bp__label                              | {}    |
| --cells-demo-resizable-viewport-bar-selected-label          | .iron-selected .bp__label               | {}    |
| --cells-demo-resizable-viewport-button-reset                | .btn-reset                              | {}    |
| --cells-demo-resizable-viewport-button-reset-active         | .btn-reset:hover                        | {}    |
| --cells-demo-resizable-viewport-button-reset-active         | .btn-reset:active                       | {}    |
| --cells-demo-resizable-viewport-button-reset-active         | .btn-reset:focus                        | {}    |

 * @customElement
 * @hero cells-demo-resizable-viewport.png
 * @demo demo/index.html
 * @appliesMixin GestureEventListeners
 * @extends {LitElement}
 */
class cellsDemoResizableViewport extends LitElement {

  static get is() {
    return 'cells-demo-resizable-viewport';
  }

  static get properties() {
    return {
      /**
       * List of available breakpoints.
       * `height` property is optional.
       */
      breakpoints: {
        type: Object
      },

      _sortedBreakpoints: {
        type: Array
      },

      /**
       * Selected breakpoint.
       */
      selectedBreakpoint: {
        type: Object
        //readOnly: true
      },

      /**
       * Selected breakpoint key.
       */
      selectedKey: {
        type: String
      },

      /**
       * Used to change the reset button visibility.
       */
      _breakpointsChanged: {
        type: Boolean
      }
    }
  }

  constructor() {
    super();
    this.breakpoints = {
      mobile: { width: 320, height: 640, name: 'Mobile', },
      tablet: { width: 768, height: 1024, name: 'Tablet', },
      desktop: { width: 1024, height: 800, name: 'Desktop', },
    };
    this.selectedKey = 'mobile';
    this._breakpointsChanged = false;
    this._sortedBreakpoints = [];
  }

  updated(changedProps) {
    if (changedProps.has('breakpoints')) {
      this._sortBreakpoints(this.breakpoints);
      this._addListeners();
    }
    if (changedProps.has('selectedBreakpoint')) {
      this.dispatchEvent(new CustomEvent('selected-breakpoint-changed', {
        detail: {
          value: this.selectedBreakpoint
        }
      }));
    }
    if (changedProps.has('selectedKey')) {
      this._selectedKeyChanged();
      this.dispatchEvent(new CustomEvent('selected-key-changed', {
        detail: {
          value: this.selectedKey
        }
      }));
    }
  }

  static get shadyStyles() {
    return `
      ${styles}
      ${getComponentSharedStyles('cells-demo-resizable-viewport-shared-styles')}
    `;
  }

  async _addListeners() {
    await this.updateComplete;
    const elems = this.shadowRoot.querySelectorAll('.bp__bar');
    this._sortedBreakpoints.forEach((item, index) => {
      Gestures.addListener(elems[index], 'track', (e) => {
        this._onTrack(e, index);
      });
    });
  }

  render() {
    const items = this._sortedBreakpoints.map((item, index) => html`
      <div class="bp__bar" style="width: ${item.width}px; z-index: ${index};" data-id="${item.id}">
        <div class="bp__label">${item.name} â€“ ${item.width}px</div>
        <svg width="10" height="10" viewBox="0 0 10 10" class="dragger">
          <path class="dragger-path" d="M8.293.293c.39-.39 1.024-.39 1.414 0 .39.39.39 1.024 0 1.414l-8 8c-.39.39-1.024.39-1.414 0-.39-.39-.39-1.024 0-1.414l8-8zm0 6c.39-.39 1.024-.39 1.414 0 .39.39.39 1.024 0 1.414l-2 2c-.39.39-1.024.39-1.414 0-.39-.39-.39-1.024 0-1.414l2-2z" fill-rule="nonzero"></path>
        </svg>
      </div>
    `);
    return html`
      <style>${this.constructor.shadyStyles}</style>

      <div class="bp">
        <cells-selector @selected-changed="${this._setSelectedKey}" selected="${this.selectedKey}" attr-for-selected="data-id" id="list">
          ${items}
        </cells-selector>

        <button ?hidden="${!this._breakpointsChanged}" @click="${this.reset}" class="btn-reset">reset</button>
      </div>
    `;
  }

  _setSelectedKey(e) {
    this.selectedKey = e.detail.value;
  }

  /**
   * Restore the original breakpoints width.
   */
  reset() {
    this._sortBreakpoints(this.breakpoints);
    this.selectedBreakpoint = this._breakpoint;
    setTimeout(() => {
      this._breakpointsChanged = false;
    }, 100);
  }

  /**
   * Returns the selected breakpoint Object.
   */
  get _breakpoint() {
    return this._sortedBreakpoints.find(function(bp) {
      return bp.id === this.shadowRoot.querySelector('#list').selected;
    }, this);
  }

  _selectedKeyChanged() {
    setTimeout(() => {
      this.selectedBreakpoint = this._breakpoint;
    }, 1);
  }

  /**
   * Sorts breakpoints from greater to lower width.
   */
  _sortBreakpoints(breakpoints) {
    var arr = [];

    Object.keys(breakpoints).forEach(function(key, i) {
      arr[i] = JSON.parse(JSON.stringify(breakpoints[key]));
      arr[i].id = key;
    });

    this._sortedBreakpoints = arr.sort(function(a, b) {
      return b.width - a.width;
    });
  }

  _onTrack(e, index) {
    var state = {
      'start': this._onTrackStart.bind(this),
      'track': this._onTrackX.bind(this),
      'end': this._onTrackEnd.bind(this),
    };

    state[e.detail.state](e, index);
  }

  /**
   * Sets _dragging to true if the dragging is horizontal.
   */
  _onTrackStart(e, index) {
    this._dragging = Math.abs(e.detail.dy) < Math.abs(e.detail.dx);
  }

  _onTrackX(e, index) {
    if (!this._dragging) {
      return;
    }
    this._width = this._width || parseInt(window.getComputedStyle(e.currentTarget).width);
    this._sortedBreakpoints[index].width = this._width + (e.detail.dx * 2);
    this.requestUpdate();
  }

  _onTrackEnd(e, index) {
    if (!this._dragging) {
      return;
    }
    const item = this._sortedBreakpoints[index];

    // show reset button if any of the breakpoints has changed its original width
    if (item.width !== this.breakpoints[item.id].width) {
      this._breakpointsChanged = true;
    }

    this._updateSelected(index);
    this._dragging = false;
    this._width = null;
  }

  _updateSelected(index) {
    const list = this.shadowRoot.querySelector('#list');
    if (list.indexOf(list.selectedItem) === index) {
      this.selectedBreakpoint = {};
      this.selectedBreakpoint = this._breakpoint;
    }
  }

}

customElements.define(cellsDemoResizableViewport.is, cellsDemoResizableViewport);
