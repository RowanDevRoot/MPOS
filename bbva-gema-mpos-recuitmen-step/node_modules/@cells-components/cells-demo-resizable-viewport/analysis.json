{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`<cells-demo-resizable-viewport>` allows you to showcase other components at different viewport sizes (breakpoints) in a similar manner that the Google Chrome Inspector does in the device toolbar.\n\n__Example:__\n\n```html\n<cells-demo-resizable-viewport\n  breakpoints='{\n    \"mobile\": { \"width\": 360, \"height\": 640, \"name\": \"Mobile\" },\n    \"tablet\": { \"width\": 768, \"height\": 1024, \"name\": \"Tablet\" }}'\n  selected-key=\"tablet\">\n</cells-demo-resizable-viewport>\n```\n\n## Styling\n\nThe following custom properties and mixins are available for styling:\n\n### Custom Properties\n| Custom Property                                        | Selector                                        | CSS Property | Value                                                    |\n| ------------------------------------------------------ | ----------------------------------------------- | ------------ | -------------------------------------------------------- |\n| --cells-demo-resizable-viewport-background-color       | .bp__bar                                        | border       | `No fallback value`                                      |\n| --cells-demo-resizable-viewport-dragger-inactive-color | .bp__bar .dragger-path                          | fill         |  ![#fff](https://placehold.it/15/fff/000000?text=+) #fff |\n| --cells-demo-resizable-viewport-dragger-color          | .bp__bar.iron-selected ~ .bp__bar .dragger-path | fill         | `No fallback value`                                      |\n| --cells-demo-resizable-viewport-dragger-color          | .bp__bar.iron-selected .dragger-path            | fill         | `No fallback value`                                      |\n| --cells-demo-resizable-viewport-dragger-color          | .bp__bar:hover ~ .bp__bar .dragger-path         | fill         | `No fallback value`                                      |\n| --cells-demo-resizable-viewport-dragger-color          | .bp__bar:hover .dragger-path                    | fill         | `No fallback value`                                      |\n### @apply\n| Mixins                                                      | Selector                                | Value |\n| ----------------------------------------------------------- | --------------------------------------- | ----- |\n| --cells-demo-resizable-viewport-bar-wrapper                 | .bp                                     | {}    |\n| --cells-demo-resizable-viewport-bar                         | .bp__bar                                | {}    |\n| --cells-demo-resizable-viewport-dragger                     | .bp__bar .dragger                       | {}    |\n| --cells-demo-resizable-viewport-bar-selected                | .bp__bar.iron-selected                  | {}    |\n| --cells-demo-resizable-viewport-bar-selected-siblings       | .bp__bar.iron-selected ~ .bp__bar       | {}    |\n| --cells-demo-resizable-viewport-bar-selected-siblings-hover | .bp__bar.iron-selected ~ .bp__bar:hover | {}    |\n| --cells-demo-resizable-viewport-bar-hover                   | .bp__bar:hover                          | {}    |\n| --cells-demo-resizable-viewport-bar-hover-siblings          | .bp__bar:hover ~ .bp__bar               | {}    |\n| --cells-demo-resizable-viewport-bar-hover-label             | .bp__bar:hover .bp__label               | {}    |\n| --cells-demo-resizable-viewport-bar-hover-label-siblings    | .bp__bar:hover ~ .bp__bar .bp__label    | {}    |\n| --cells-demo-resizable-viewport-bar-label                   | .bp__label                              | {}    |\n| --cells-demo-resizable-viewport-bar-selected-label          | .iron-selected .bp__label               | {}    |\n| --cells-demo-resizable-viewport-button-reset                | .btn-reset                              | {}    |\n| --cells-demo-resizable-viewport-button-reset-active         | .btn-reset:hover                        | {}    |\n| --cells-demo-resizable-viewport-button-reset-active         | .btn-reset:active                       | {}    |\n| --cells-demo-resizable-viewport-button-reset-active         | .btn-reset:focus                        | {}    |",
      "summary": "",
      "path": "cells-demo-resizable-viewport.js",
      "properties": [
        {
          "name": "_breakpoint",
          "type": "?",
          "description": "Returns the selected breakpoint Object.\n   ",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 2
            },
            "end": {
              "line": 151,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "breakpoints",
          "type": "Object | null | undefined",
          "description": "List of available breakpoints.\n`height` property is optional.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_sortBreakpoints\"",
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"mobile\":{\"width\":360,\"height\":640,\"name\":\"Mobile\"},\"tablet\":{\"width\":768,\"height\":1024,\"name\":\"Tablet\"},\"desktop\":{\"width\":1024,\"height\":800,\"name\":\"Desktop\"}}"
        },
        {
          "name": "_sortedBreakpoints",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 6
            },
            "end": {
              "line": 102,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "selectedBreakpoint",
          "type": "Object | null | undefined",
          "description": "Selected breakpoint.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 111,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selectedKey",
          "type": "string | null | undefined",
          "description": "Selected breakpoint key.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_selectedKeyChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "\"mobile\""
        },
        {
          "name": "_breakpointsChanged",
          "type": "boolean | null | undefined",
          "description": "Used to change the reset button visibility.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 6
            },
            "end": {
              "line": 129,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "reset",
          "description": "Restore the original breakpoints width.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 2
            },
            "end": {
              "line": 142,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectedKeyChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 157,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_sortBreakpoints",
          "description": "Sorts breakpoints from greater to lower width.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 2
            },
            "end": {
              "line": 173,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "breakpoints"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onTrack",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onTrackStart",
          "description": "Sets _dragging to true if the dragging is horizontal.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onTrackX",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 199,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onTrackEnd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 201,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 221,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 58,
          "column": 0
        },
        "end": {
          "line": 222,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "cellsDemoResizableViewport",
      "attributes": [
        {
          "name": "breakpoints",
          "description": "List of available breakpoints.\n`height` property is optional.",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected-breakpoint",
          "description": "Selected breakpoint.",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 6
            },
            "end": {
              "line": 111,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected-key",
          "description": "Selected breakpoint key.",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 6
            },
            "end": {
              "line": 121,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-breakpoint-changed",
          "description": "Fired when the `selectedBreakpoint` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-key-changed",
          "description": "Fired when the `selectedKey` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cells-demo-resizable-viewport",
      "mixins": [
        "GestureEventListeners"
      ]
    }
  ]
}
