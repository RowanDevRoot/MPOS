import { LitElement, html, } from 'lit-element';
import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import { ifDefined, } from 'lit-html/directives/if-defined';
import '@cells-components/cells-demos-ui/cells-demos-ui.js';
import '@cells-components/cells-demos-ui/icons.js';
import '@cells-components/cells-dropdown-menu/cells-dropdown-menu.js';
import styles from './cells-demo-dropdown-menu-styles.js';
/*

`<cells-demo-dropdown-menu>` applies Cells Platform styles to [cells-dropdown-menu](https://globaldevtools.bbva.com/bitbucket/projects/CELLSCOMPONENTSCATALOG/repos/cells-dropdown-menu/browse). The component can be considered as a style wrapper.

**Note:** [cells-demos-ui](https://globaldevtools.bbva.com/bitbucket/projects/CELLSCOMPONENTSCATALOG/repos/cells-demos-ui/browse) is included in the component as own dependency (not as devDependency) because the component is meant to be used in _cells-demo-*_ components instead of applications.

Example:

```html
<cells-demo-dropdown-menu
  selected="{{selected}}"
  label="Some label"
  items='[{
    "name": "Item one",
    "value": "item-one"
  }, {
    "name": "Item two",
    "value": "item-two"
  }, {
    "name": "Item three",
    "value": "item-three"
  }]'>
</cells-demo-dropdown-menu>
```

## Styling

The following custom properties and mixins are available for styling:

### Custom Properties
| Custom Property                 | Selector                                                                | CSS Property                                   | Value                                                             |
| ------------------------------- | ----------------------------------------------------------------------- | ---------------------------------------------- | ----------------------------------------------------------------- |
| --cells-demo-grey-2             | .label                                                                  | color                                          | `No fallback value`                                               |
| --cells-demo-grey-3             | .dropdown > --cells-dropdown-layer-control-text: unquote("              | color                                          | `No fallback value`                                               |
| --cells-demo-menu-control-green | .dropdown > --cells-dropdown-menu-control-icon-check-checked: unquote(" | color                                          |  ![#1DFD92](https://placehold.it/15/1DFD92/000000?text=+) #1DFD92 |
| --cells-demo-grey-4             | .dropdown                                                               | --cells-dropdown-layer-hovered-underline-color | `No fallback value`                                               |
| --cells-demo-grey-4             | .dropdown                                                               | --cells-dropdown-layer-opened-underline-color  | `No fallback value`                                               |
| --cells-demo-grey-4             | .dropdown                                                               | --cells-dropdown-layer-hovered-icon-color      | `No fallback value`                                               |
| --cells-demo-grey-4             | .dropdown                                                               | --cells-dropdown-layer-opened-icon-color       | `No fallback value`                                               |
| --cells-demo-grey-1             | .dropdown                                                               | --cells-dropdown-menu-value-color              | `No fallback value`                                               |
### @apply
| Mixins                              | Selector  | Value |
| ----------------------------------- | --------- | ----- |
| --cells-demo-dropdown-menu          | :host     | {}    |
| --cells-demo-dropdown-menu-label    | .label    | {}    |
| --cells-demo-dropdown-menu-dropdown | .dropdown | {}    |

 * @customElement
 * @demo demo/index.html
 * @extends {LitElement}
 */
class cellsDemoDropdownMenu extends LitElement {
  static get is() {
    return 'cells-demo-dropdown-menu';
  }

  static get properties() {
    return {
      /**
       * Dropdown items.
       * [{
       *   name: 'Item label',
       *   value: 'some-value'
       * }]
       */
      items: {
        type: Array,
      },

      /**
       * Text over dropdown.
       */
      label: {
        type: String,
      },

      /**
       * Selected dropdown index.
       */
      selected: {
        type: Number,
        value: 0,
      },

      /**
       * Icon for the selected dropdown item.
       */
      iconCheck: {
        type: String,
        attribute: 'icon-check',
      },

      /**
       * Icon for the open / close state.
       * The same icon is used for both states with a CSS transformation.
       */
      iconOpen: {
        type: String,
        attribute: 'icon-open',
      },

      _uniqueID: {
        type: Number,
      },
    };
  }

  constructor() {
    super();
    this.selected = 0;
    this.iconCheck = 'cdui:check';
    this.iconOpen = 'cdui:arrow-down';
    this._uniqueID = new Date().valueOf();
  }

  updated(changedProps) {
    if (changedProps.has('selected')) {
      this.dispatchEvent(new CustomEvent('selected-changed', {
        detail: {
          value: this.selected,
        },
      }));
    }
  }

  static get shadyStyles() {
    return `
      ${styles}
      ${getComponentSharedStyles('cells-demo-dropdown-menu-shared-styles')}
    `;
  }

  render() {
    return html`
      <style>${this.constructor.shadyStyles}</style>
      <div class="label" id="label-${this._uniqueID}">${this.label}</div>
      <cells-dropdown-menu
        class="dropdown"
        aria-labelledby="label-${this._uniqueID}"
        .items="${ifDefined(this.items)}"
        .selected="${this.selected}"
        @selected-changed="${this._setSelected}"
        .iconCheck="${this.iconCheck}"
        .iconOpen="${this.iconOpen}">
        <slot></slot>
      </cells-dropdown-menu>
    `;
  }

  _setSelected(e) {
    this.selected = e.detail.value;
  }
}
customElements.define(cellsDemoDropdownMenu.is, cellsDemoDropdownMenu);
