import { getComponentSharedStyles, } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import { LitElement, html, } from 'lit-element';
import { ifDefined, } from 'lit-html/directives/if-defined.js';
import '@cells-components/cells-codemirror';
import '@cells-components/cells-demo-case';
import '@cells-components/cells-demo-dropdown-menu';
import '@cells-components/cells-demo-event-toaster';
import '@cells-components/cells-demo-resizable-viewport';
import '@cells-components/cells-demos-ui/spinner.js';
import '@cells-components/cells-demo-radio-tabs';
import styles from './cells-demo-helper-styles.js';
/**
`cells-demo-helper` allows to generate a demo page for multiple demo cases of a component.

It automatically populates a dropdown with all the available cases.
It also inserts the demo in a resizable iframe to ease showing responsive features of the component.

Finally, it places each demo case's code in the code area, so the final user can copy/paste it.

## Usage

`cells-demo-helper` expects to have one or more `cells-demo-case` instances inside it, each instance will be a 'demo case'.

The component will get the __content__ of each demo case, which must be wrapped in a `<template>` tag, and it will generate dynamically an iframe with the code inside each demo case's template.

__Important:__ the `template` that must be put as child of `cells-demo-case`, and which wraps all the code for the case, won't be passed to the iframe. So, don't use it for `dom-bind` purpose. You can add template tags with dom-bind inside this template tag.

__Important:__ all dependencies inside the iframe will be retrieved from the `<head>` tag of the page in which `cells-demo-helper` is used (that is, the demo html).

Alternatively, you can specify which dependencies should be imported in the demo cases but not in the demo main page using 'type="lazy-module"' instead of 'type="module"' for them. This way, just the dependencies with 'lazy-module' will be used inside the demo cases.

Using 'lazy-module', any other script with type 'module' won't be included in the demo cases iframe.

Each demo should have a `heading` attribute with the title of the case, and an optional `description` attribute with an extended text if necessary.

Example:
```html
<head>
...
  <script type="module" href="mycomponent/mycomponent.html">
</head>
<body>
...
<cells-demo-helper>
  <cells-demo-case heading="Case 1">
    <template>
      Demo content here
      <my-component>...</my-component>
    </template>
  </cells-demo-case>
</cells-demo-helper>
...
</body>
```

## Resizable viewport

`cells-demo-helper` uses `cells-demo-resizable-viewport` to provide resizable features to the iframe, and will use its default values and properties. You can use the following attributes to customize how it behaves:

- __resolution__: initial selected resolution.
- __breakpoints__: object containing the viewport options, as describen in `cells-demo-resizable-viewport` docs.

Examples:
```html
<cells-demo-helper resolution="tablet">
  <cells-demo-case heading="Case 1">
    <template>
      Demo content here
    </template>
  </cells-demo-case>
</cells-demo-helper>
```

```html
<cells-demo-helper resolution="mobile" breakpoints='{
    "mobile": { "width": 360, "height": 640, "name": "Mobile" },
    "tablet": { "width": 768, "height": 1024, "name": "Tablet" }}'>
  <cells-demo-case heading="Case 1">
    <template>
      Demo content here
    </template>
  </cells-demo-case>
</cells-demo-helper>
```

## Events

You can pass an Array of event names to the `events` attribute, it will be the same than passing them to `cells-demo-event-toaster`, which will add event listeners for all of them.

So each time one of those events is fired inside the demo cases iframe, a paper-toast element will be fired with the event's information.

Example:
```html
<cells-demo-helper events='["my-component-event-open","my-component-event-close"]'>
  <cells-demo-case heading="Case 1">
    <template>
      Demo content here
    </template>
  </cells-demo-case>
</cells-demo-helper>
```

## Hiding header and sidebar for development purposes

The header and sidebar can be hidden by adding the attribute "hide-ui" to the component. This feature may be useful when you need to test the demo in a mobile device.

Example:

```html
<cells-demo-helper hide-ui></cells-demo-helper>
```

## Styling

The following custom properties and mixins are available for styling:

### Custom Properties
| Custom Property                | Selector | CSS Property                      | Value               |
| ------------------------------ | -------- | --------------------------------- | ------------------- |
| --cells-fontDefault            | :host    | font-family                       |  Lato, sans-serif   |
| --cells-demo-helper-text-color | :host    | color                             | `No fallback value` |
| --cells-demo-helper-text-color | .tabs    | --cells-demo-radio-tabs-color-selected | `No fallback value` |
### @apply
| Mixins                                       | Selector                                      | Value |
| -------------------------------------------- | --------------------------------------------- | ----- |
| --cells-demo-helper                          | :host                                         | {}    |
| --cells-demo-helper-ui-checkbox              | .ui-checkbox                                  | {}    |
| --cells-demo-helper-header                   | .header                                       | {}    |
| --cells-demo-helper-tabs                     | .tabs                                         | {}    |
| --cells-demo-helper-top                      | .top-row                                      | {}    |
| --cells-demo-helper-case-heading             | .heading                                      | {}    |
| --cells-demo-helper-case-heading-title       | .heading-title                                | {}    |
| --cells-demo-helper-case-heading-description | .heading-description                          | {}    |
| --cells-demo-helper-selectors                | .selectors                                    | {}    |
| --cells-demo-helper-dropdown                 | .dropdown                                     | {}    |
| --cells-demo-helper-main                     | .main                                         | {}    |
| --cells-demo-helper-resize-ui                | .resizer                                      | {}    |
| --cells-demo-helper-small-resize-ui          | @media (max-width: 767px) > .resizer          | {}    |
| --cells-demo-helper-iframe-container         | .iframe-container                             | {}    |
| --cells-demo-helper-small-iframe-container   | @media (max-width: 767px) > .iframe-container | {}    |
| --cells-demo-helper-medium-iframe-container  | @media (min-width: 768px) > .iframe-container | {}    |
| --cells-demo-helper-iframe                   | .iframe-container iframe                      | {}    |
| --cells-demo-helper-iframe-mobile-frame      | .iframe-container:before                      | {}    |
| --cells-demo-helper-overlay                  | .overlay                                      | {}    |
| --cells-demo-helper-overlay-visible          | .overlay.visible                              | {}    |
| --cells-demo-helper-code-wrapper             | .code-wrapper                                 | {}    |
| --cells-demo-helper-code-wrapper-visible     | .visible .code-wrapper                        | {}    |
| --cells-demo-helper-code-overlay-inner       | .overlay-inner                                | {}    |
| --cells-demo-helper-code-copy-button         | .copy-button                                  | {}    |
| --cells-demo-helper-code                     | .code                                         | {}    |
| --cells-demo-helper-code-pre                 | .code > pre                                   | {}    |

 * @customElement cells-demo-helper
 * @polymer
 * @LitElement
 * @demo demo/index.html
 */
class cellsDemoHelper extends LitElement {
  static get is() {
    return 'cells-demo-helper';
  }

  static get properties() {
    return {
      /**
       * Array with the demo cases
       */
      _cases: {
        type: Array,
      },

      /**
       * Current case title
       */
      _caseTitle: {
        type: String,
      },

      /**
       * Current case description
       */
      _description: {
        type: String,
      },

      /**
       * Array of events which cells-demo-event-toaster should listen for
       */
      events: {
        type: Array,
      },

      /**
       * Default resolution key for the iframe
       */
      resolution: {
        type: String,
      },

      _resolution: {
        type: Object,
      },

      /**
       * Custom breakpoints for cells-demo-resizable-viewport
       */
      breakpoints: {
        type: Object,
      },

      /**
       * Stores current iframe template
       */
      _tpl: {
        type: String,
      },

      /**
       * Index of the selected demo-case.
       */
      selected: {
        type: Number,
      },

      /**
       * Prevents current document head to be passed on to the iframe. Useful for testing purposes
       */
      _noHead: {
        type: Boolean,
      },

      /**
       * Allow to show multiple toasts simultaneously
       */
      multiToast: {
        type: Boolean,
        attribute: 'multi-toast',
      },

      _toastAlign: {
        type: String,
      },

      _toastPositionTarget: {
        type: Element,
      },

      _tabs: {
        type: Array,
      },

      /**
       * Used to set a negative tabindex to focusable elements
       * when the code tab is active.
       */
      _tabindex: {
        type: Number,
      },

      _selectedTab: {
        type: Number,
      },

      /**
       * Set to true to hide all the UI elements except the preview for development purposes.
       */
      hideUi: {
        type: Boolean,
        reflect: true,
        attribute: 'hide-ui',
      },

      /**
       * Set to true to force ShadyDOM usage inside demo case iframe
       */
      shadyDom: {
        type: Boolean,
        attribute: 'shady-dom',
      },

      /**
       * Used to show the spinner only the first time (not between demos).
       */
      _firstRender: {
        type: Boolean,
      },

      /**
       * Show console warnings about style modules not found in components (shared-styles).
       */
      showStyleModuleWarnings: {
        type: Boolean,
        attribute: 'show-style-module-warnings',
      },

      _iframeWidth: {
        type: Number,
      },

      _iframeHeight: {
        type: Number,
      },

      _editorValue: {
        type: String,
      },

      _cloneEditorValue: {
        type: String,
      },

      filterScripts: {
        type: Array,
      },
    };
  }

  constructor() {
    super();
    this._caseTitle = '';
    this._description = '';
    this._cases = [];
    this.resolution = 'mobile';
    this.value = '';
    this.selected = 0;
    this._noHead = false;
    this.multiToast = false;
    this._toastAlign = 'bottom';
    this._tabs = ['Preview', 'Code',];
    this._selectedTab = 0;
    this.hideUi = false;
    this.shadyDom = window.sessionStorage.getItem('cells-demo-helper-shady') === 'true';
    this._firstRender = true;
    this.showStyleModuleWarnings = false;
    this._allDemosCase = [];
    this.filterScripts = ['build/demo-build.js',];
    this._cacheScriptsHeadIframe = '';
  }

  updated(changedProps) {
    if (changedProps.has('selected')) {
      this.dispatchEvent(new CustomEvent('selected-changed', {
        detail: this.selected,
      }));
    }

    if (changedProps.has('_selectedTab')) {
      this.dispatchEvent(new CustomEvent('selected-tab-changed', {
        detail: this._selectedTab,
      }));
      this._selectedTabChanged(this._selectedTab, changedProps.get('_selectedTab'));
    }

    if (changedProps.has('_editorValue')) {
      this._updateDemo(changedProps.get('_editorValue'));
    }
  }

  static get shadyStyles() {
    return `
      ${styles.cssText}
      ${getComponentSharedStyles('cells-demo-helper-shared-styles')}
      ${getComponentSharedStyles('spinner-styles')}
    `;
  }

  render() {
    return html`
      <style>${this.constructor.shadyStyles}</style>

      <cells-demo-event-toaster
        .multiple="${this.multiToast}"
        .verticalAlign="${this._toastAlign}"
        .positionTarget="${this._toastPositionTarget}"
        .events="${this.events}"
        id="eventToaster">
      </cells-demo-event-toaster>

      <div class="ui-checkbox">
        <label id="hideUI" class="ui-checkbox__label">
          <input type="checkbox" ?checked="${this.hideUi}" @change="${(e) => {this.hideUi = e.target.checked;}}" class="ui-checkbox__input">
          <span>Hide UI</span>
        </label>
        <label class="ui-checkbox__label">
          <input type="checkbox" ?checked="${this.shadyDom}" @change="${this._onShadyDomChange}" class="ui-checkbox__input">
          <span>ShadyDOM</span>
        </label>
      </div>

      <div class="header">
        <div class="top-row">
          <div class="heading">
            <h1 class="heading-title">${this._caseTitle}</h1>
            <p class="heading-description" ?hidden="${!this._description}">${this._description}</p>
          </div>

          <cells-demo-radio-tabs class="tabs" .options="${this._tabs}" .selected="${this._selectedTab}" @selected-changed="${(e) => {this._selectedTab = e.detail.value;}}"></cells-demo-radio-tabs>

          <div class="selectors">
            <cells-demo-dropdown-menu class="dropdown case-selector" tabindex="${ifDefined(this._tabindex)}" label="Demo" .items="${this._cases}" .selected="${this.selected}" @selected-changed="${(e) => {this._onSelectedCaseIndexChanged(e.detail.value);}}"></cells-demo-dropdown-menu>
          </div>
        </div>
      </div>
      <!-- /.header -->

      <div class="main" id="main">
        <cells-demo-resizable-viewport class="resizer" .breakpoints="${ifDefined(this.breakpoints)}" .selectedKey="${this.resolution}" @selected-breakpoint-changed="${(e) => this._updateResolution(e)}"></cells-demo-resizable-viewport>

        <div id="iframeContainer" class="iframe-container" style="width:${this._iframeWidth}px; height:${this._iframeHeight}px"></div>

        <div class="overlay ${this._isActiveTab(this._selectedTab, 'Code')}">
          <div class="overlay-inner">
            <p class="disclaimer">
              <span>
                Live Editor
              </span>
              <span>
                Modify the code and go back to preview tab
              </span>
            </p>
            <button type="button" id="copyButton" class="copy-button" @click="${this._copyToClipboard}">Copy</button>
            <div class="code-wrapper">
              <cells-codemirror theme="monokai"  line-numbers id="editor" content="${ifDefined(this._editorHtml)}"></cells-codemirror>
            </div>
          </div>
        </div>
      </div>
      <!-- /.main -->
    `;
  }

  get allDemosCase() {
    return [...this.querySelectorAll('cells-demo-case'),];
  }

  get iframeContainer() {
    return this.shadowRoot.querySelector('#iframeContainer');
  }

  get iframe() {
    return this.iframeContainer.querySelector('iframe');
  }

  get copyButton() {
    return this.shadowRoot.querySelector('#copyButton');
  }

  _onShadyDomChange(ev) {
    this.shadyDom = ev.target.checked;
    window.sessionStorage.setItem('cells-demo-helper-shady', this.shadyDom);
    this._setIframe(this._allDemosCase[this.selected]);
  }

  connectedCallback() {
    super.connectedCallback();
    this._allDemosCase = this.allDemosCase;
    this._setCasesDropdown();

    // change the toast position and position target if the component is inside an iframe (Catalog App)
    /* istanbul ignore else */
    if (window !== top) {
      this._toastAlign = 'top';
      this._toastPositionTarget = this.shadowRoot.querySelector('#main');
    }
    document.body.style.margin = 0;
  }

  _updateResolution(e) {
    this._iframeWidth = e.detail.value.width;
    this._iframeHeight = e.detail.value.height;
  }

  /**
   * Populates cases array based on available cells-demo-case contents
   */
  _setCasesDropdown() {
    this._cases = this._allDemosCase.map((item) => {
      return {
        name: item.heading,
        value: item,
      };
    });
  }

  _onSelectedCaseIndexChanged(index) {
    if (!this._allDemosCase[index]) {
      return;
    }
    this.selected = index;
    this._editorValue = undefined;
    this._setCurrentCase(this._allDemosCase[index]);
    this._setIframe(this._allDemosCase[index]);
  }

  _setCurrentCase(elem) {
    this._caseTitle = elem.heading;
    this._description = elem.description;
    this._editorHtml = this._getDemoCaseHtml(elem);
  }

  _getDemoCaseHtml(elem) {
    return this._editorValue || elem.getInner();
  }

  _isActiveTab(selectedTab, tabName) {
    return this._tabs[selectedTab] === tabName ? 'visible' : '';
  }

  _selectedTabChanged(tab, previousValue) {
    if (previousValue === undefined) {
      return;
    }

    // return false instead of zero to remove the attribute
    this._tabindex = tab === 1 ? -1 : false;

    if (this.iframe) {
      this.iframe.setAttribute('tabindex', this._tabindex);
    }

    this._editorValue = this.shadowRoot.querySelector('#editor').getValue();
  }

  _updateDemo(previousValue) {
    if (previousValue === undefined) {
      return;
    }

    this._setIframe(this._allDemosCase[this.selected]);
  }

  _getScriptsHeadIframe() {
    /* istanbul ignore else */
    if (this._noHead) {
      return '';
    }

    if (this._cacheScriptsHeadIframe) {
      return this._cacheScriptsHeadIframe;
    }

    const head = document.querySelector('head');
    const clone = head.cloneNode(true);
    const scripts = [...clone.querySelectorAll('script'),].filter((script) => {
      return !this.filterScripts.some(text =>
        script.outerHTML.includes(text));
    });

    return this._cacheScriptsHeadIframe = scripts.map(item =>
      item.outerHTML)
      .join('')
      .replace('&gt;', '>')
      .replace('&lt;', '<')
      .replace('&amp;', '&');
  }

  _templateIframe(script, elem) {
    return `
      <html lang="${window.document.documentElement.lang}">
      <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Iframe ${window.document.title}</title>
      <style>
        *:not(:defined) {
          display: none;
        }
      </style>
      <script>
        ${this.shadyDom ? `
          window.ShadyDOM = { force: true };
        ` : ''}
      </script>
      ${script}
      <head>
      <body id="iframeBody">
      ${elem}
      </body>
      </html>
    `;
  }

  /**
   * Generates iframe for selected case
   * @param {HTML} elem
   */
  _setIframe(elem) {
    this._cleanIframe();
    const iframe = this._generateIframe(elem);

    this.iframeContainer.appendChild(iframe);

    // prevent accessing to document not created yet
    /* istanbul ignore else */
    if (!iframe.contentDocument) {
      return;
    }

    this._tpl = this._templateIframe(this._getScriptsHeadIframe(), this._getDemoCaseHtml(elem));

    iframe.contentDocument.open();
    iframe.contentDocument.write(this._tpl);
    iframe.contentDocument.close();

    const onWebComponentsReady = () => {
      this._passEvents(iframe);
      if (this._firstRender) {
        this._firstRender = false;
        this.dispatchEvent(new CustomEvent('demo-loaded-complete', {
          bubbles: true,
          composed: true,
        }));
      }
    };
    iframe.contentDocument.addEventListener('WebComponentsReady', onWebComponentsReady.bind(this));
  }

  _generateIframe() {
    const iframe = document.createElement('iframe');

    iframe.addEventListener('load', () => {
      if (!iframe.contentDocument.head.childNodes.length) {
        return;
      }

      this.dispatchEvent(new CustomEvent('iframe-loaded', {
        bubbles: true,
        composed: true,
      }));
    });

    return iframe;
  }

  /**
   * Removes existing iframes
   */
  _cleanIframe() {
    let old = this.iframe;
    if (old) {
      this.iframeContainer.removeChild(old);
      old = null;
    }
  }

  /**
   * Creates listener for events inside iframe and propagates events firing to cells-demo-event-toaster
   * @param {HTML} iframe
   */
  _passEvents(iframe) {
    if (this.events) {
      const eventToaster = this.shadowRoot.querySelector('#eventToaster');
      const events = this.events;
      for (let i = 0; i < events.length; i++) {
        iframe.contentDocument.addEventListener(events[i], (e) => {
          eventToaster.dispatchEvent(new CustomEvent(events[i], e));
        });
      }
    }
  }

  /**
   * Copies code snippet to clipboard
   */
  _copyToClipboard() {
    let textarea = document.createElement('textarea');
    textarea.style.cssText = 'height:0; overflow:hidden;';
    textarea.value = this.shadowRoot.querySelector('#editor').getValue();
    document.body.appendChild(textarea);
    textarea.select();

    try {
      document.execCommand('copy', false);
      this.copyButton.innerText = 'Copied!';
    } catch (err) {
      /* istanbul ignore next */ this.copyButton.innerText = 'Error';
      /* istanbul ignore next */ console.error(err);
    }
    textarea.remove();
    setTimeout(this._resetCopyButtonState.bind(this), 100);
  }

  /**
   * Reset copy button text
   */
  _resetCopyButtonState() {
    this.copyButton.innerText = 'Copy';
  }
}

/* istanbul ignore next */
if (!customElements.get(cellsDemoHelper.is)) {
  customElements.define(cellsDemoHelper.is, cellsDemoHelper);
}
