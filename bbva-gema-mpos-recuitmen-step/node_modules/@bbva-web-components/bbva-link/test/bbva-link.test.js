import { html, fixture, assert, fixtureCleanup } from '@open-wc/testing';
import sinon from 'sinon';

import '../bbva-link.js';
suite('bbva-link', () => {
  let el;

  teardown(() => fixtureCleanup());
  suite('bbva-link - Basic', () => {
    setup(async () => {
      el = await fixture(
        html`
          <bbva-link>Aceptar</bbva-link>
        `,
      );
      await el.updateComplete;
    });

    test('Without props, click must emit an event', () => {
      const eventSpy = sinon.spy();
      el.addEventListener('click', eventSpy);
      el.click();
      assert.isTrue(eventSpy.calledOnce);
    });

    suite('Semantic Dom', () => {
      test('SHADOW DOM - Structure test without props', () => {
        assert.shadowDom.equalSnapshot(el);
      });

      test('LIGHT DOM - Structure test', () => {
        assert.lightDom.equalSnapshot(el, { ignoreAttributes: ['id'] });
      });
    });

    test('a11y', () => assert.isAccessible(el));
  });

  suite('bbva-link - Disabled', () => {
    setup(async () => {
      el = await fixture(
        html`
          <bbva-link disabled>Aceptar</bbva-link>
        `,
      );
      await el.updateComplete;
    });

    test('click must not emit an event', () => {
      const eventSpy = sinon.spy();
      el.addEventListener('click', eventSpy);
      el.click();

      assert.isFalse(eventSpy.calledOnce);
    });
  });

  suite('bbva-link - href provided', () => {
    setup(async () => {
      el = await fixture(
        html`
          <bbva-link href="https://www.bbva.com/">Aceptar</bbva-link>
        `,
      );
      await el.updateComplete;
    });

    test('With href provided, a must be present', () => {
      assert.equal(el.querySelector('a').href, 'https://www.bbva.com/');
    });

    test('a11y', () => assert.isAccessible(el));

    suite('Semantic Dom', () => {
      test('SHADOW DOM - Structure test with link', () => {
        assert.shadowDom.equalSnapshot(el);
      });

      test('LIGHT DOM - Structure test', () => {
        assert.lightDom.equalSnapshot(el, { ignoreAttributes: ['id'] });
      });
    });
  });

  suite('bbva-link - with icon', () => {
    setup(async () => {
      el = await fixture(
        html`
          <bbva-link icon="coronita:close">Aceptar</bbva-link>
        `,
      );
      await el.updateComplete;
    });

    suite('Semantic Dom', () => {
      test('SHADOW DOM - Structure test', () => {
        assert.shadowDom.equalSnapshot(el);
      });

      test('LIGHT DOM - Structure test', () => {
        assert.lightDom.equalSnapshot(el, { ignoreAttributes: ['id'] });
      });
    });

    test('a11y', () => assert.isAccessible(el));
  });
});
