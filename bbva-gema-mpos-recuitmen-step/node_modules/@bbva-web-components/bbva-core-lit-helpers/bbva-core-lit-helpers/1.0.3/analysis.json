{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "The `bbva-core-dom-module` element registers the dom it contains to the name given\nby the module's id attribute. It provides a unified database of dom\naccessible via its static `import` API.\n\nExample:\n\n    <bbva-core-dom-module id=\"foo\">\n      <img src=\"stuff.png\">\n    </bbva-core-dom-module>\n\nThen in code in some other location that cannot access the bbva-core-dom-module above\n\n    let img = customElements.get('bbva-core-dom-module').import('foo', 'img');",
      "summary": "",
      "path": "elements/bbva-core-dom-module.js",
      "properties": [
        {
          "name": "assetpath",
          "type": "?",
          "description": "The absolute URL of the original location of this `bbva-core-dom-module`.\n\nThis value will differ from this element's `ownerDocument` in the\nfollowing ways:\n- Takes into account any `assetpath` attribute added during bundling\n  to indicate the original location relative to the bundled location\n   ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "modules",
          "type": "modules",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 140,
              "column": 0
            },
            "end": {
              "line": 140,
              "column": 45
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "modulesStyles",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 0
            },
            "end": {
              "line": 141,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "attributeChangedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 2
            },
            "end": {
              "line": 98,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute."
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old value of attribute."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "Current value of attribute."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "register",
          "description": "Registers the bbva-core-dom-module at a given id. This method should only be called\nwhen a bbva-core-dom-module is imperatively created. For\nexample, `document.createElement('bbva-core-dom-module').register('foo')`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 125,
              "column": 2
            },
            "end": {
              "line": 137,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "moduleId"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "import",
          "description": "Retrieves the element specified by the css `selector` in the module\nregistered by `id`. For example, this.import('foo', 'img');",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 84,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "string",
              "description": "The id of the bbva-core-dom-module in which to search."
            },
            {
              "name": "selector",
              "type": "string=",
              "description": "The css selector by which to find the element."
            }
          ],
          "return": {
            "type": "Element",
            "desc": "Returns the element which matches `selector` in the\nmodule registered at the specified `id`."
          }
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 59,
          "column": 7
        },
        "end": {
          "line": 138,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "BbvaCoreDomModule",
      "attributes": [
        {
          "name": "id",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 12
            },
            "end": {
              "line": 61,
              "column": 16
            }
          },
          "metadata": {}
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "bbva-core-dom-module"
    },
    {
      "description": "Custom element for defining styles in the main document that can take\nadvantage of [shady DOM](https://github.com/webcomponents/shadycss) shims\nfor style encapsulation and custom properties.\n\n- Document styles defined in a `<bbva-core-custom-style>` are shimmed to ensure they\n  do not leak into local DOM when running on browsers without native\n  Shadow DOM.\n- Custom properties can be defined in a `<bbva-core-custom-style>`. Use the `html` selector\n  to define custom properties that apply to all custom elements.\n\nTo use:\n\n- Place a `<bbva-core-custom-style>` element in the main document, wrapping an inline `<style>` tag that\n  contains the CSS rules you want to shim.\n\n<bbva-core-custom-style>\n  <style>\n    html {\n      --custom-color: blue;\n      --custom-mixin: {\n        font-weight: bold;\n        color: red;\n      };\n    }\n  </style>\n</bbva-core-custom-style>\n```",
      "summary": "",
      "path": "elements/bbva-core-custom-style.js",
      "properties": [],
      "methods": [
        {
          "name": "getStyle",
          "description": "Returns the light-DOM `<style>` child this element wraps.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 92,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "HTMLStyleElement",
            "desc": "This element's light-DOM `<style>`"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 54,
          "column": 7
        },
        "end": {
          "line": 93,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "BbvaCoreCustomStyle",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "bbva-core-custom-style"
    }
  ],
  "functions": [
    {
      "name": "resolveUrl",
      "description": "Resolves the given URL against the provided `baseUri'.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
      "summary": "",
      "sourceRange": {
        "file": "utils/resolve-url.js",
        "start": {
          "line": 26,
          "column": 7
        },
        "end": {
          "line": 59,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "string",
          "desc": "Input URL to resolve",
          "name": "url"
        },
        {
          "type": "?string=",
          "desc": "Base URI to resolve the URL against",
          "name": "baseURI"
        }
      ],
      "return": {
        "type": "string",
        "desc": "resolved URL"
      }
    },
    {
      "name": "resolveCss",
      "description": "Resolves any relative URL's in the given CSS text against the provided\n`ownerDocument`'s `baseURI`.",
      "summary": "",
      "sourceRange": {
        "file": "utils/resolve-url.js",
        "start": {
          "line": 69,
          "column": 7
        },
        "end": {
          "line": 74,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "string",
          "desc": "CSS text to process",
          "name": "cssText"
        },
        {
          "type": "string",
          "desc": "Base URI to resolve the URL against",
          "name": "baseURI"
        }
      ],
      "return": {
        "type": "string",
        "desc": "Processed CSS text with resolved URL's"
      }
    },
    {
      "name": "pathFromUrl",
      "description": "Returns a path from a given `url`. The path includes the trailing\n`/` from the url.",
      "summary": "",
      "sourceRange": {
        "file": "utils/resolve-url.js",
        "start": {
          "line": 83,
          "column": 7
        },
        "end": {
          "line": 85,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "string",
          "desc": "Input URL to transform",
          "name": "url"
        }
      ],
      "return": {
        "type": "string",
        "desc": "resolved path"
      }
    },
    {
      "name": "setRootPath",
      "description": "Sets the global rootPath property used by `ElementMixin` and\navailable via `rootPath`.",
      "summary": "",
      "sourceRange": {
        "file": "utils/settings.js",
        "start": {
          "line": 36,
          "column": 27
        },
        "end": {
          "line": 38,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "string",
          "desc": "The new root path",
          "name": "path"
        }
      ],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setSanitizeDOMValue",
      "description": "Sets the global sanitizeDOMValue available via this module's exported\n`sanitizeDOMValue` variable.",
      "summary": "",
      "sourceRange": {
        "file": "utils/settings.js",
        "start": {
          "line": 64,
          "column": 35
        },
        "end": {
          "line": 66,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "((function (*, string, string, Node): *) | undefined)",
          "desc": "the global sanitizeDOMValue callback",
          "name": "newSanitizeDOMValue"
        }
      ],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setPassiveTouchGestures",
      "description": "Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.",
      "summary": "",
      "sourceRange": {
        "file": "utils/settings.js",
        "start": {
          "line": 82,
          "column": 39
        },
        "end": {
          "line": 84,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "boolean",
          "desc": "enable or disable passive touch gestures globally",
          "name": "usePassive"
        }
      ],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setStrictTemplatePolicy",
      "description": "Sets `strictTemplatePolicy` globally for all elements",
      "summary": "",
      "sourceRange": {
        "file": "utils/settings.js",
        "start": {
          "line": 101,
          "column": 39
        },
        "end": {
          "line": 103,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "boolean",
          "desc": "enable or disable strict template policy\n  globally",
          "name": "useStrictPolicy"
        }
      ],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setAllowTemplateFromDomModule",
      "description": "Sets `lookupTemplateFromDomModule` globally for all elements",
      "summary": "",
      "sourceRange": {
        "file": "utils/settings.js",
        "start": {
          "line": 120,
          "column": 45
        },
        "end": {
          "line": 122,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "boolean",
          "desc": "enable or disable template lookup\n  globally",
          "name": "allowDomModule"
        }
      ],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setCancelSyntheticClickEvents",
      "description": "Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.",
      "summary": "",
      "sourceRange": {
        "file": "utils/settings.js",
        "start": {
          "line": 138,
          "column": 45
        },
        "end": {
          "line": 140,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [
        {
          "type": "boolean",
          "desc": "enable or disable cancelling synthetic\nevents",
          "name": "useCancelSyntheticClickEvents"
        }
      ],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setComponentSharedStyles",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "src/BbvaCoreLitThemeHelpers.js",
        "start": {
          "line": 9,
          "column": 40
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "setDocumentCustomStyles",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "src/BbvaCoreLitThemeHelpers.js",
        "start": {
          "line": 22,
          "column": 39
        },
        "end": {
          "line": 33,
          "column": 1
        }
      },
      "privacy": "public",
      "params": [],
      "return": {
        "type": "void"
      }
    },
    {
      "name": "getComponentSharedStyles",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "src/BbvaCoreLitComponentHelpers.js",
        "start": {
          "line": 5,
          "column": 40
        },
        "end": {
          "line": 17,
          "column": 1
        }
      },
      "privacy": "public",
      "params": []
    }
  ]
}
