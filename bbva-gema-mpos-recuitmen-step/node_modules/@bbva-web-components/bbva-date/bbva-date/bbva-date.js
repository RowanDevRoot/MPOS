import { LitElement, html } from 'lit-element';
import { getComponentSharedStyles } from '@cells-components/cells-lit-helpers/cells-lit-helpers.js';
import styles from './bbva-date-styles.js';

/**
Date types are usually used at the top of a movement list to inform the user of the date of a transaction.

Example:

```html
<bbva-date
  id="custom-options"
  date="December 17, 1995"
  locale="en-US"
  ></bbva-date>
<script>
  const date = document.getElementById('custom-options');
  date.options = {
    day: '2-digit',
    month: 'long',
    year: '2-digit',
  };
</script>
```

## Styling

The following custom properties are available for styling:

### Custom properties

| Selector | CSS Property | CSS Variable | Theme Variable                          | Foundations/Fallback                                              |
| -------- | ------------ | ------------ | --------------------------------------- | ----------------------------------------------------------------- |
| :host    | font-size    |              | --typographyTypeSmall                   | foundations.typography.typeSmall                    |
| :host    | font-weight  |              | --fontFacePrimaryMediumItalicFontWeight | foundations.fontFacePrimary.mediumItalic.fontWeight |
| :host    | font-style   |              | --fontFacePrimaryMediumItalicFontStyle  | foundations.fontFacePrimary.mediumItalic.fontStyle  |
| :host    | line-height  |              | --lineHeightTypeSmall                   | foundations.lineHeight.typeSmall                    |
> Styling documentation generated by Cells CLI

@customElement bbva-date
@polymer
@LitElement
@demo demo/index.html
*/
export class BbvaDate extends LitElement {
  static get is() {
    return 'bbva-date';
  }

  static get properties() {
    return {
      /*
       * Date object that represents the string that's showed by the component.
       * When initializing, it expects whatever format `new Date()` can receive
       * and converts it to a `Date`.
 n      */
      date: {
        type: Date,
        converter: value => new Date(value),
      },
      /*
       * Based on the `toLocaleDateString()` spec, this object is passed into
       * the function to be printed accordingly.
       */
      options: {
        type: Object,
      },
      /*
       * String formated in the form of `en-US` that's passed into
       * `toLocaleDateString()` to be translated correctly.
       */
      locale: {
        type: String,
      },
    };
  }

  constructor() {
    super();

    this.date = new Date();
    this.locale = 'es-ES';
    this.options = {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    };
  }

  static get styles() {
    return [styles, getComponentSharedStyles('bbva-date-shared-styles')];
  }

  render() {
    return html`
      ${this.date.toLocaleDateString() !== 'Invalid Date'
        ? this.date.toLocaleDateString(this.locale, this.options)
        : html``}
    `;
  }
}

customElements.define(BbvaDate.is, BbvaDate);
