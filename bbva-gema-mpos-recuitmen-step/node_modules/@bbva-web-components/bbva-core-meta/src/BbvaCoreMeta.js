/**
`BbvaCoreMeta` is based on Polymer's `iron-meta`, and it is a generic class you can use for sharing information across the
DOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)
such that any instance of it has access to the shared information.
You can use `BbvaCoreMeta` to share whatever you want.

The `BbvaCoreMeta` instances contain your actual data.
The only requirement is that you create them before you try to access them.
*/
export class BbvaCoreMeta {
  constructor(options) {
    this.type = (options && options.type) || 'default';
    this.key = options && options.key;
    BbvaCoreMeta.classFieldTypes(); // https://developers.google.com/web/updates/2018/12/class-fields
    if (options && 'value' in options) {
      this.value = options.value;
    }
  }

  /**
   * Sets types property if it does not exist.
   */
  static classFieldTypes() {
    if (this.types) {
      return;
    }
    this.types = {};
  }

  /**
   * Returns value of instance key and type
   */
  get value() {
    const { type } = this;
    const key = this._key || this.key;
    this._key = undefined;
    if (type && key) {
      return BbvaCoreMeta.types[type] && BbvaCoreMeta.types[type][key];
    }
    return undefined;
  }

  /**
   * Sets value to instance type and key
   * @param {*} key Value to set
   */
  set value(value) {
    let { type } = this;
    const { key } = this;

    if (type && key) {
      BbvaCoreMeta.types[type] = BbvaCoreMeta.types[type] || {};
      type = BbvaCoreMeta.types[type];

      if (value === null) {
        delete type[key];
      } else {
        type[key] = value;
      }
    }
  }

  /**
   * Returns list of keys of instance type
   */
  get list() {
    const { type } = this;
    if (type) {
      const itemsType = BbvaCoreMeta.types[type];
      if (itemsType) {
        return Object.keys(itemsType).map(itemType => itemsType[itemType], this);
      }
      return [];
    }
    return undefined;
  }

  /**
   * Returns value of provided key
   * @param {*} key
   */
  byKey(key) {
    this._key = key;
    return this.value;
  }
}
