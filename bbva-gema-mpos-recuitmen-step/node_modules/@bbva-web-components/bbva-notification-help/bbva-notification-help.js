import { LitElement, html } from 'lit-element';
import { getComponentSharedStyles } from '@cells-components/cells-lit-helpers';
import styles from './bbva-notification-help-styles.js';
import '@cells-components/cells-icon/cells-icon.js';
/**
This component shown a notificaton with icon and text.

Example:

```html
<bbva-notification-help
  aria-label-icon="Alert"
  class="alert"
  icon="coronita:alert"
  text="Lorem ipsum dolor sit amet"></bbva-notification-help>
```

## Icons

Since this component uses icons, it will need an [iconset](https://platform.bbva.com/en-us/developers/engines/cells/documentation/cells-architecture/components/components-in-depth/icons) in your project as an application level dependency. In fact, this component uses an iconset in its demo.

## Styling

The following custom properties are available for styling:

### Custom properties

| Selector                 | CSS Property | CSS Variable                              | Theme Variable               | Foundations/Fallback                                  |
| ------------------------ | ------------ | ----------------------------------------- | ---------------------------- | ----------------------------------------------------- |
| :host(.light) .text-help | color        | --bbva-notification-help-text-color-light | --colorsPrimaryCoreLightened | foundations.colors.primaryCoreLightened |
| :host(.light) .icon-help | color        | --bbva-notification-help-icon-color-light | --colorsPrimaryCoreLightened | foundations.colors.primaryCoreLightened |
| :host(.alert) .text-help | color        | --bbva-notification-help-text-color-alert | --colorsSecondary600         | foundations.colors.secondary600         |
| :host(.alert) .icon-help | color        | --bbva-notification-help-icon-color-alert | --colorsTertiaryType1Dark    | foundations.colors.tertiaryType1Dark    |
| .text-help               | font-size    | --bbva-notification-help-text-font-size   | --typographyType3XSmall      | foundations.typography.type3XSmall      |
| .text-help               | line-height  | --bbva-notification-help-text-line-height | --lineHeightType3XSmall      | foundations.lineHeight.type3XSmall      |
| .text-help               | color        | --bbva-notification-help-text-color       | --colorsSecondary500         | foundations.colors.secondary500         |
| .icon-help               | margin-right | --gridSpacerVariant                       | --gridSpacer                 | foundations.grid.spacer                 |
| .icon-help               | color        | --bbva-notification-help-icon-color       | --colorsPrimarySubdued       | foundations.colors.primarySubdued       |
> Styling documentation generated by Cells CLI

@customElement bbva-notification-help
@polymer
@LitElement
@demo demo/index.html
*/
export class BbvaNotificationHelp extends LitElement {
  static get is() {
    return 'bbva-notification-help';
  }

  static get properties() {
    return {
      /**
       * Icon accessibility text
       */
      ariaLabelIcon: {
        type: String,
        attribute: 'aria-label-icon',
      },
      /**
       * Icon to be shown
       */
      icon: {
        type: String,
      },
      /**
       * Icon size. By default 16px
       */
      iconSize: {
        type: Number,
        attribute: 'icon-size',
      },
      /**
       * Text to be shown
       */
      text: {
        type: String,
      },
    };
  }

  constructor() {
    super();

    this.ariaLabelIcon = '';
    this.icon = '';
    this.iconSize = 16;
    this.text = '';
  }

  static get styles() {
    return [styles, getComponentSharedStyles('bbva-notification-help-shared-styles')];
  }

  render() {
    return html`
      <span class="accessible-hide" ?hidden="${!this.ariaLabelIcon}">${this.ariaLabelIcon}</span>

      <cells-icon
        aria-hidden="true"
        .icon="${this.icon}"
        .size="${this.iconSize}"
        class="icon-help"
      >
      </cells-icon>

      <p class="text-help">${this.text}</p>
    `;
  }
}

customElements.define(BbvaNotificationHelp.is, BbvaNotificationHelp);
